// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  deanery: (where?: DeaneryWhereInput) => Promise<boolean>;
  diocese: (where?: DioceseWhereInput) => Promise<boolean>;
  imageType: (where?: ImageTypeWhereInput) => Promise<boolean>;
  parish: (where?: ParishWhereInput) => Promise<boolean>;
  poster: (where?: PosterWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  deanery: (where: DeaneryWhereUniqueInput) => DeaneryNullablePromise;
  deaneries: (args?: {
    where?: DeaneryWhereInput;
    orderBy?: DeaneryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deanery>;
  deaneriesConnection: (args?: {
    where?: DeaneryWhereInput;
    orderBy?: DeaneryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeaneryConnectionPromise;
  diocese: (where: DioceseWhereUniqueInput) => DioceseNullablePromise;
  dioceses: (args?: {
    where?: DioceseWhereInput;
    orderBy?: DioceseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Diocese>;
  diocesesConnection: (args?: {
    where?: DioceseWhereInput;
    orderBy?: DioceseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DioceseConnectionPromise;
  imageType: (where: ImageTypeWhereUniqueInput) => ImageTypeNullablePromise;
  imageTypes: (args?: {
    where?: ImageTypeWhereInput;
    orderBy?: ImageTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ImageType>;
  imageTypesConnection: (args?: {
    where?: ImageTypeWhereInput;
    orderBy?: ImageTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageTypeConnectionPromise;
  parish: (where: ParishWhereUniqueInput) => ParishNullablePromise;
  parishes: (args?: {
    where?: ParishWhereInput;
    orderBy?: ParishOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Parish>;
  parishesConnection: (args?: {
    where?: ParishWhereInput;
    orderBy?: ParishOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ParishConnectionPromise;
  poster: (where: PosterWhereUniqueInput) => PosterNullablePromise;
  posters: (args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Poster>;
  postersConnection: (args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PosterConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createDeanery: (data: DeaneryCreateInput) => DeaneryPromise;
  updateDeanery: (args: {
    data: DeaneryUpdateInput;
    where: DeaneryWhereUniqueInput;
  }) => DeaneryPromise;
  updateManyDeaneries: (args: {
    data: DeaneryUpdateManyMutationInput;
    where?: DeaneryWhereInput;
  }) => BatchPayloadPromise;
  upsertDeanery: (args: {
    where: DeaneryWhereUniqueInput;
    create: DeaneryCreateInput;
    update: DeaneryUpdateInput;
  }) => DeaneryPromise;
  deleteDeanery: (where: DeaneryWhereUniqueInput) => DeaneryPromise;
  deleteManyDeaneries: (where?: DeaneryWhereInput) => BatchPayloadPromise;
  createDiocese: (data: DioceseCreateInput) => DiocesePromise;
  updateDiocese: (args: {
    data: DioceseUpdateInput;
    where: DioceseWhereUniqueInput;
  }) => DiocesePromise;
  updateManyDioceses: (args: {
    data: DioceseUpdateManyMutationInput;
    where?: DioceseWhereInput;
  }) => BatchPayloadPromise;
  upsertDiocese: (args: {
    where: DioceseWhereUniqueInput;
    create: DioceseCreateInput;
    update: DioceseUpdateInput;
  }) => DiocesePromise;
  deleteDiocese: (where: DioceseWhereUniqueInput) => DiocesePromise;
  deleteManyDioceses: (where?: DioceseWhereInput) => BatchPayloadPromise;
  createImageType: (data: ImageTypeCreateInput) => ImageTypePromise;
  updateImageType: (args: {
    data: ImageTypeUpdateInput;
    where: ImageTypeWhereUniqueInput;
  }) => ImageTypePromise;
  updateManyImageTypes: (args: {
    data: ImageTypeUpdateManyMutationInput;
    where?: ImageTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertImageType: (args: {
    where: ImageTypeWhereUniqueInput;
    create: ImageTypeCreateInput;
    update: ImageTypeUpdateInput;
  }) => ImageTypePromise;
  deleteImageType: (where: ImageTypeWhereUniqueInput) => ImageTypePromise;
  deleteManyImageTypes: (where?: ImageTypeWhereInput) => BatchPayloadPromise;
  createParish: (data: ParishCreateInput) => ParishPromise;
  updateParish: (args: {
    data: ParishUpdateInput;
    where: ParishWhereUniqueInput;
  }) => ParishPromise;
  updateManyParishes: (args: {
    data: ParishUpdateManyMutationInput;
    where?: ParishWhereInput;
  }) => BatchPayloadPromise;
  upsertParish: (args: {
    where: ParishWhereUniqueInput;
    create: ParishCreateInput;
    update: ParishUpdateInput;
  }) => ParishPromise;
  deleteParish: (where: ParishWhereUniqueInput) => ParishPromise;
  deleteManyParishes: (where?: ParishWhereInput) => BatchPayloadPromise;
  createPoster: (data: PosterCreateInput) => PosterPromise;
  updatePoster: (args: {
    data: PosterUpdateInput;
    where: PosterWhereUniqueInput;
  }) => PosterPromise;
  updateManyPosters: (args: {
    data: PosterUpdateManyMutationInput;
    where?: PosterWhereInput;
  }) => BatchPayloadPromise;
  upsertPoster: (args: {
    where: PosterWhereUniqueInput;
    create: PosterCreateInput;
    update: PosterUpdateInput;
  }) => PosterPromise;
  deletePoster: (where: PosterWhereUniqueInput) => PosterPromise;
  deleteManyPosters: (where?: PosterWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  deanery: (
    where?: DeanerySubscriptionWhereInput
  ) => DeanerySubscriptionPayloadSubscription;
  diocese: (
    where?: DioceseSubscriptionWhereInput
  ) => DioceseSubscriptionPayloadSubscription;
  imageType: (
    where?: ImageTypeSubscriptionWhereInput
  ) => ImageTypeSubscriptionPayloadSubscription;
  parish: (
    where?: ParishSubscriptionWhereInput
  ) => ParishSubscriptionPayloadSubscription;
  poster: (
    where?: PosterSubscriptionWhereInput
  ) => PosterSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ParishOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeaneryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PosterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "description_ASC"
  | "description_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DioceseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PosterUpdateDataInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeUpdateOneWithoutPostersInput>;
  category?: Maybe<CategoryUpdateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserUpdateOneInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedPostersInput>;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ParishUpdateOneWithoutCategoriesInput {
  create?: Maybe<ParishCreateWithoutCategoriesInput>;
  update?: Maybe<ParishUpdateWithoutCategoriesDataInput>;
  upsert?: Maybe<ParishUpsertWithoutCategoriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ParishWhereUniqueInput>;
}

export interface DioceseCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deaneries?: Maybe<DeaneryCreateManyWithoutDioceseInput>;
}

export interface ParishUpdateWithoutCategoriesDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deanery?: Maybe<DeaneryUpdateOneWithoutParishesInput>;
}

export interface PosterUpdateManyWithoutUpdatedAuthorInput {
  create?: Maybe<
    | PosterCreateWithoutUpdatedAuthorInput[]
    | PosterCreateWithoutUpdatedAuthorInput
  >;
  delete?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  set?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  disconnect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  update?: Maybe<
    | PosterUpdateWithWhereUniqueWithoutUpdatedAuthorInput[]
    | PosterUpdateWithWhereUniqueWithoutUpdatedAuthorInput
  >;
  upsert?: Maybe<
    | PosterUpsertWithWhereUniqueWithoutUpdatedAuthorInput[]
    | PosterUpsertWithWhereUniqueWithoutUpdatedAuthorInput
  >;
  deleteMany?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  updateMany?: Maybe<
    | PosterUpdateManyWithWhereNestedInput[]
    | PosterUpdateManyWithWhereNestedInput
  >;
}

export interface DeaneryUpdateOneWithoutParishesInput {
  create?: Maybe<DeaneryCreateWithoutParishesInput>;
  update?: Maybe<DeaneryUpdateWithoutParishesDataInput>;
  upsert?: Maybe<DeaneryUpsertWithoutParishesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DeaneryWhereUniqueInput>;
}

export interface ImageTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  posters_every?: Maybe<PosterWhereInput>;
  posters_some?: Maybe<PosterWhereInput>;
  posters_none?: Maybe<PosterWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageTypeWhereInput[] | ImageTypeWhereInput>;
  OR?: Maybe<ImageTypeWhereInput[] | ImageTypeWhereInput>;
  NOT?: Maybe<ImageTypeWhereInput[] | ImageTypeWhereInput>;
}

export interface DeaneryUpdateWithoutParishesDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  diocese?: Maybe<DioceseUpdateOneWithoutDeaneriesInput>;
}

export interface DioceseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  deaneries_every?: Maybe<DeaneryWhereInput>;
  deaneries_some?: Maybe<DeaneryWhereInput>;
  deaneries_none?: Maybe<DeaneryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DioceseWhereInput[] | DioceseWhereInput>;
  OR?: Maybe<DioceseWhereInput[] | DioceseWhereInput>;
  NOT?: Maybe<DioceseWhereInput[] | DioceseWhereInput>;
}

export interface DioceseUpdateOneWithoutDeaneriesInput {
  create?: Maybe<DioceseCreateWithoutDeaneriesInput>;
  update?: Maybe<DioceseUpdateWithoutDeaneriesDataInput>;
  upsert?: Maybe<DioceseUpsertWithoutDeaneriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DioceseWhereUniqueInput>;
}

export interface PosterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PosterWhereInput>;
  AND?: Maybe<PosterSubscriptionWhereInput[] | PosterSubscriptionWhereInput>;
  OR?: Maybe<PosterSubscriptionWhereInput[] | PosterSubscriptionWhereInput>;
  NOT?: Maybe<PosterSubscriptionWhereInput[] | PosterSubscriptionWhereInput>;
}

export interface DioceseUpdateWithoutDeaneriesDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface ParishWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  deanery?: Maybe<DeaneryWhereInput>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ParishWhereInput[] | ParishWhereInput>;
  OR?: Maybe<ParishWhereInput[] | ParishWhereInput>;
  NOT?: Maybe<ParishWhereInput[] | ParishWhereInput>;
}

export interface DioceseUpsertWithoutDeaneriesInput {
  update: DioceseUpdateWithoutDeaneriesDataInput;
  create: DioceseCreateWithoutDeaneriesInput;
}

export interface ImageTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageTypeWhereInput>;
  AND?: Maybe<
    ImageTypeSubscriptionWhereInput[] | ImageTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    ImageTypeSubscriptionWhereInput[] | ImageTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ImageTypeSubscriptionWhereInput[] | ImageTypeSubscriptionWhereInput
  >;
}

export interface DeaneryUpsertWithoutParishesInput {
  update: DeaneryUpdateWithoutParishesDataInput;
  create: DeaneryCreateWithoutParishesInput;
}

export interface DeanerySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DeaneryWhereInput>;
  AND?: Maybe<DeanerySubscriptionWhereInput[] | DeanerySubscriptionWhereInput>;
  OR?: Maybe<DeanerySubscriptionWhereInput[] | DeanerySubscriptionWhereInput>;
  NOT?: Maybe<DeanerySubscriptionWhereInput[] | DeanerySubscriptionWhereInput>;
}

export interface ParishUpsertWithoutCategoriesInput {
  update: ParishUpdateWithoutCategoriesDataInput;
  create: ParishCreateWithoutCategoriesInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface PosterUpdateManyWithoutCategoryInput {
  create?: Maybe<
    PosterCreateWithoutCategoryInput[] | PosterCreateWithoutCategoryInput
  >;
  delete?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  set?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  disconnect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  update?: Maybe<
    | PosterUpdateWithWhereUniqueWithoutCategoryInput[]
    | PosterUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | PosterUpsertWithWhereUniqueWithoutCategoryInput[]
    | PosterUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  updateMany?: Maybe<
    | PosterUpdateManyWithWhereNestedInput[]
    | PosterUpdateManyWithWhereNestedInput
  >;
}

export interface PosterUpdateManyMutationInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PosterUpdateWithWhereUniqueWithoutCategoryInput {
  where: PosterWhereUniqueInput;
  data: PosterUpdateWithoutCategoryDataInput;
}

export interface PosterUpdateInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeUpdateOneWithoutPostersInput>;
  category?: Maybe<CategoryUpdateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserUpdateOneInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedPostersInput>;
}

export interface PosterUpdateWithoutCategoryDataInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeUpdateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserUpdateOneInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedPostersInput>;
}

export interface ParishUpdateInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deanery?: Maybe<DeaneryUpdateOneWithoutParishesInput>;
  categories?: Maybe<CategoryUpdateManyWithoutParishInput>;
}

export interface ImageTypeUpdateOneWithoutPostersInput {
  create?: Maybe<ImageTypeCreateWithoutPostersInput>;
  update?: Maybe<ImageTypeUpdateWithoutPostersDataInput>;
  upsert?: Maybe<ImageTypeUpsertWithoutPostersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ImageTypeWhereUniqueInput>;
}

export interface ParishCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deanery?: Maybe<DeaneryCreateOneWithoutParishesInput>;
  categories?: Maybe<CategoryCreateManyWithoutParishInput>;
}

export interface ImageTypeUpdateWithoutPostersDataInput {
  name?: Maybe<String>;
}

export interface PosterUpsertWithWhereUniqueWithoutImageTypeInput {
  where: PosterWhereUniqueInput;
  update: PosterUpdateWithoutImageTypeDataInput;
  create: PosterCreateWithoutImageTypeInput;
}

export interface ImageTypeUpsertWithoutPostersInput {
  update: ImageTypeUpdateWithoutPostersDataInput;
  create: ImageTypeCreateWithoutPostersInput;
}

export type ImageTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PosterUpdateManyWithoutImageTypeInput {
  create?: Maybe<
    PosterCreateWithoutImageTypeInput[] | PosterCreateWithoutImageTypeInput
  >;
  delete?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  set?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  disconnect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  update?: Maybe<
    | PosterUpdateWithWhereUniqueWithoutImageTypeInput[]
    | PosterUpdateWithWhereUniqueWithoutImageTypeInput
  >;
  upsert?: Maybe<
    | PosterUpsertWithWhereUniqueWithoutImageTypeInput[]
    | PosterUpsertWithWhereUniqueWithoutImageTypeInput
  >;
  deleteMany?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  updateMany?: Maybe<
    | PosterUpdateManyWithWhereNestedInput[]
    | PosterUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterUpdateManyInput>;
  createdCategories?: Maybe<CategoryUpdateManyWithoutCreatedAuthorInput>;
  updatedPosters?: Maybe<PosterUpdateManyWithoutUpdatedAuthorInput>;
  updatedCategories?: Maybe<CategoryUpdateManyWithoutUpdatedAuthorInput>;
}

export interface PosterCreateWithoutImageTypeInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  category?: Maybe<CategoryCreateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserCreateOneInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedPostersInput>;
}

export interface PosterUpdateManyInput {
  create?: Maybe<PosterCreateInput[] | PosterCreateInput>;
  update?: Maybe<
    | PosterUpdateWithWhereUniqueNestedInput[]
    | PosterUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PosterUpsertWithWhereUniqueNestedInput[]
    | PosterUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  set?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  disconnect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
  deleteMany?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  updateMany?: Maybe<
    | PosterUpdateManyWithWhereNestedInput[]
    | PosterUpdateManyWithWhereNestedInput
  >;
}

export interface PosterCreateManyWithoutImageTypeInput {
  create?: Maybe<
    PosterCreateWithoutImageTypeInput[] | PosterCreateWithoutImageTypeInput
  >;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
}

export interface PosterUpdateWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput;
  data: PosterUpdateDataInput;
}

export interface DioceseUpdateManyMutationInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface DioceseUpdateInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deaneries?: Maybe<DeaneryUpdateManyWithoutDioceseInput>;
}

export interface DeaneryUpdateManyDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface CategoryUpdateOneWithoutPostersInput {
  create?: Maybe<CategoryCreateWithoutPostersInput>;
  update?: Maybe<CategoryUpdateWithoutPostersDataInput>;
  upsert?: Maybe<CategoryUpsertWithoutPostersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface DeaneryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeaneryScalarWhereInput[] | DeaneryScalarWhereInput>;
  OR?: Maybe<DeaneryScalarWhereInput[] | DeaneryScalarWhereInput>;
  NOT?: Maybe<DeaneryScalarWhereInput[] | DeaneryScalarWhereInput>;
}

export interface CategoryUpdateWithoutPostersDataInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishUpdateOneWithoutCategoriesInput>;
  createdAuthor?: Maybe<UserUpdateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedCategoriesInput>;
}

export interface DeaneryUpsertWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput;
  update: DeaneryUpdateWithoutDioceseDataInput;
  create: DeaneryCreateWithoutDioceseInput;
}

export interface UserUpdateOneWithoutCreatedCategoriesInput {
  create?: Maybe<UserCreateWithoutCreatedCategoriesInput>;
  update?: Maybe<UserUpdateWithoutCreatedCategoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedCategoriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DeaneryUpdateWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput;
  data: DeaneryUpdateWithoutDioceseDataInput;
}

export interface UserUpdateWithoutCreatedCategoriesDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterUpdateManyInput>;
  updatedPosters?: Maybe<PosterUpdateManyWithoutUpdatedAuthorInput>;
  updatedCategories?: Maybe<CategoryUpdateManyWithoutUpdatedAuthorInput>;
}

export interface ParishCreateOneWithoutCategoriesInput {
  create?: Maybe<ParishCreateWithoutCategoriesInput>;
  connect?: Maybe<ParishWhereUniqueInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  parish?: Maybe<ParishWhereInput>;
  posters_every?: Maybe<PosterWhereInput>;
  posters_some?: Maybe<PosterWhereInput>;
  posters_none?: Maybe<PosterWhereInput>;
  createdAuthor?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAuthor?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface DeaneryCreateOneWithoutParishesInput {
  create?: Maybe<DeaneryCreateWithoutParishesInput>;
  connect?: Maybe<DeaneryWhereUniqueInput>;
}

export interface PosterUpdateWithWhereUniqueWithoutUpdatedAuthorInput {
  where: PosterWhereUniqueInput;
  data: PosterUpdateWithoutUpdatedAuthorDataInput;
}

export interface DioceseCreateOneWithoutDeaneriesInput {
  create?: Maybe<DioceseCreateWithoutDeaneriesInput>;
  connect?: Maybe<DioceseWhereUniqueInput>;
}

export interface PosterUpdateWithoutUpdatedAuthorDataInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeUpdateOneWithoutPostersInput>;
  category?: Maybe<CategoryUpdateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserUpdateOneInput>;
}

export interface PosterCreateManyWithoutCategoryInput {
  create?: Maybe<
    PosterCreateWithoutCategoryInput[] | PosterCreateWithoutCategoryInput
  >;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
}

export interface PosterUpsertWithWhereUniqueWithoutUpdatedAuthorInput {
  where: PosterWhereUniqueInput;
  update: PosterUpdateWithoutUpdatedAuthorDataInput;
  create: PosterCreateWithoutUpdatedAuthorInput;
}

export interface ImageTypeCreateOneWithoutPostersInput {
  create?: Maybe<ImageTypeCreateWithoutPostersInput>;
  connect?: Maybe<ImageTypeWhereUniqueInput>;
}

export interface PosterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  OR?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
  NOT?: Maybe<PosterScalarWhereInput[] | PosterScalarWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PosterUpdateManyWithWhereNestedInput {
  where: PosterScalarWhereInput;
  data: PosterUpdateManyDataInput;
}

export interface PosterCreateManyInput {
  create?: Maybe<PosterCreateInput[] | PosterCreateInput>;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
}

export interface PosterUpdateManyDataInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CategoryCreateOneWithoutPostersInput {
  create?: Maybe<CategoryCreateWithoutPostersInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryUpdateManyWithoutUpdatedAuthorInput {
  create?: Maybe<
    | CategoryCreateWithoutUpdatedAuthorInput[]
    | CategoryCreateWithoutUpdatedAuthorInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutUpdatedAuthorInput[]
    | CategoryUpdateWithWhereUniqueWithoutUpdatedAuthorInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutUpdatedAuthorInput[]
    | CategoryUpsertWithWhereUniqueWithoutUpdatedAuthorInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutCreatedCategoriesInput {
  create?: Maybe<UserCreateWithoutCreatedCategoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CategoryUpdateWithWhereUniqueWithoutUpdatedAuthorInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutUpdatedAuthorDataInput;
}

export interface PosterCreateManyWithoutUpdatedAuthorInput {
  create?: Maybe<
    | PosterCreateWithoutUpdatedAuthorInput[]
    | PosterCreateWithoutUpdatedAuthorInput
  >;
  connect?: Maybe<PosterWhereUniqueInput[] | PosterWhereUniqueInput>;
}

export interface CategoryUpdateWithoutUpdatedAuthorDataInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishUpdateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterUpdateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserUpdateOneWithoutCreatedCategoriesInput>;
}

export interface CategoryCreateManyWithoutUpdatedAuthorInput {
  create?: Maybe<
    | CategoryCreateWithoutUpdatedAuthorInput[]
    | CategoryCreateWithoutUpdatedAuthorInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutUpdatedAuthorInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutUpdatedAuthorDataInput;
  create: CategoryCreateWithoutUpdatedAuthorInput;
}

export interface UserCreateOneWithoutUpdatedCategoriesInput {
  create?: Maybe<UserCreateWithoutUpdatedCategoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryCreateManyWithoutCreatedAuthorInput {
  create?: Maybe<
    | CategoryCreateWithoutCreatedAuthorInput[]
    | CategoryCreateWithoutCreatedAuthorInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface UserCreateOneWithoutUpdatedPostersInput {
  create?: Maybe<UserCreateWithoutUpdatedPostersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishUpdateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterUpdateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserUpdateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedCategoriesInput>;
}

export interface UserUpsertWithoutCreatedCategoriesInput {
  update: UserUpdateWithoutCreatedCategoriesDataInput;
  create: UserCreateWithoutCreatedCategoriesInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdPosters_every?: Maybe<PosterWhereInput>;
  createdPosters_some?: Maybe<PosterWhereInput>;
  createdPosters_none?: Maybe<PosterWhereInput>;
  createdCategories_every?: Maybe<CategoryWhereInput>;
  createdCategories_some?: Maybe<CategoryWhereInput>;
  createdCategories_none?: Maybe<CategoryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedPosters_every?: Maybe<PosterWhereInput>;
  updatedPosters_some?: Maybe<PosterWhereInput>;
  updatedPosters_none?: Maybe<PosterWhereInput>;
  updatedCategories_every?: Maybe<CategoryWhereInput>;
  updatedCategories_some?: Maybe<CategoryWhereInput>;
  updatedCategories_none?: Maybe<CategoryWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateOneWithoutUpdatedCategoriesInput {
  create?: Maybe<UserCreateWithoutUpdatedCategoriesInput>;
  update?: Maybe<UserUpdateWithoutUpdatedCategoriesDataInput>;
  upsert?: Maybe<UserUpsertWithoutUpdatedCategoriesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DeaneryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  parishes_every?: Maybe<ParishWhereInput>;
  parishes_some?: Maybe<ParishWhereInput>;
  parishes_none?: Maybe<ParishWhereInput>;
  diocese?: Maybe<DioceseWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeaneryWhereInput[] | DeaneryWhereInput>;
  OR?: Maybe<DeaneryWhereInput[] | DeaneryWhereInput>;
  NOT?: Maybe<DeaneryWhereInput[] | DeaneryWhereInput>;
}

export interface UserUpdateWithoutUpdatedCategoriesDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterUpdateManyInput>;
  createdCategories?: Maybe<CategoryUpdateManyWithoutCreatedAuthorInput>;
  updatedPosters?: Maybe<PosterUpdateManyWithoutUpdatedAuthorInput>;
}

export interface DioceseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DioceseWhereInput>;
  AND?: Maybe<DioceseSubscriptionWhereInput[] | DioceseSubscriptionWhereInput>;
  OR?: Maybe<DioceseSubscriptionWhereInput[] | DioceseSubscriptionWhereInput>;
  NOT?: Maybe<DioceseSubscriptionWhereInput[] | DioceseSubscriptionWhereInput>;
}

export interface CategoryUpdateManyWithoutCreatedAuthorInput {
  create?: Maybe<
    | CategoryCreateWithoutCreatedAuthorInput[]
    | CategoryCreateWithoutCreatedAuthorInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutCreatedAuthorInput[]
    | CategoryUpdateWithWhereUniqueWithoutCreatedAuthorInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutCreatedAuthorInput[]
    | CategoryUpsertWithWhereUniqueWithoutCreatedAuthorInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterUpdateManyInput>;
  createdCategories?: Maybe<CategoryUpdateManyWithoutCreatedAuthorInput>;
  updatedPosters?: Maybe<PosterUpdateManyWithoutUpdatedAuthorInput>;
  updatedCategories?: Maybe<CategoryUpdateManyWithoutUpdatedAuthorInput>;
}

export interface CategoryUpdateWithWhereUniqueWithoutCreatedAuthorInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutCreatedAuthorDataInput;
}

export interface ParishUpdateManyMutationInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface CategoryUpdateWithoutCreatedAuthorDataInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishUpdateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterUpdateManyWithoutCategoryInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedCategoriesInput>;
}

export interface ImageTypeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CategoryUpsertWithWhereUniqueWithoutCreatedAuthorInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutCreatedAuthorDataInput;
  create: CategoryCreateWithoutCreatedAuthorInput;
}

export interface PosterUpdateWithWhereUniqueWithoutImageTypeInput {
  where: PosterWhereUniqueInput;
  data: PosterUpdateWithoutImageTypeDataInput;
}

export interface UserUpsertWithoutUpdatedCategoriesInput {
  update: UserUpdateWithoutUpdatedCategoriesDataInput;
  create: UserCreateWithoutUpdatedCategoriesInput;
}

export type ParishWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryUpsertWithoutPostersInput {
  update: CategoryUpdateWithoutPostersDataInput;
  create: CategoryCreateWithoutPostersInput;
}

export type PosterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneWithoutUpdatedPostersInput {
  create?: Maybe<UserCreateWithoutUpdatedPostersInput>;
  update?: Maybe<UserUpdateWithoutUpdatedPostersDataInput>;
  upsert?: Maybe<UserUpsertWithoutUpdatedPostersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateWithoutUpdatedPostersDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterUpdateManyInput>;
  createdCategories?: Maybe<CategoryUpdateManyWithoutCreatedAuthorInput>;
  updatedCategories?: Maybe<CategoryUpdateManyWithoutUpdatedAuthorInput>;
}

export interface DeaneryUpdateManyWithoutDioceseInput {
  create?: Maybe<
    DeaneryCreateWithoutDioceseInput[] | DeaneryCreateWithoutDioceseInput
  >;
  delete?: Maybe<DeaneryWhereUniqueInput[] | DeaneryWhereUniqueInput>;
  connect?: Maybe<DeaneryWhereUniqueInput[] | DeaneryWhereUniqueInput>;
  set?: Maybe<DeaneryWhereUniqueInput[] | DeaneryWhereUniqueInput>;
  disconnect?: Maybe<DeaneryWhereUniqueInput[] | DeaneryWhereUniqueInput>;
  update?: Maybe<
    | DeaneryUpdateWithWhereUniqueWithoutDioceseInput[]
    | DeaneryUpdateWithWhereUniqueWithoutDioceseInput
  >;
  upsert?: Maybe<
    | DeaneryUpsertWithWhereUniqueWithoutDioceseInput[]
    | DeaneryUpsertWithWhereUniqueWithoutDioceseInput
  >;
  deleteMany?: Maybe<DeaneryScalarWhereInput[] | DeaneryScalarWhereInput>;
  updateMany?: Maybe<
    | DeaneryUpdateManyWithWhereNestedInput[]
    | DeaneryUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutUpdatedPostersInput {
  update: UserUpdateWithoutUpdatedPostersDataInput;
  create: UserCreateWithoutUpdatedPostersInput;
}

export interface ParishCreateWithoutCategoriesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  deanery?: Maybe<DeaneryCreateOneWithoutParishesInput>;
}

export interface PosterUpsertWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput;
  update: PosterUpdateDataInput;
  create: PosterCreateInput;
}

export interface DioceseCreateWithoutDeaneriesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ImageTypeCreateWithoutPostersInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface PosterUpsertWithWhereUniqueWithoutCategoryInput {
  where: PosterWhereUniqueInput;
  update: PosterUpdateWithoutCategoryDataInput;
  create: PosterCreateWithoutCategoryInput;
}

export interface PosterCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeCreateOneWithoutPostersInput>;
  category?: Maybe<CategoryCreateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserCreateOneInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedPostersInput>;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserCreateWithoutCreatedCategoriesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterCreateManyInput>;
  updatedPosters?: Maybe<PosterCreateManyWithoutUpdatedAuthorInput>;
  updatedCategories?: Maybe<CategoryCreateManyWithoutUpdatedAuthorInput>;
}

export interface DeaneryCreateWithoutDioceseInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  parishes?: Maybe<ParishCreateManyWithoutDeaneryInput>;
}

export interface CategoryCreateWithoutUpdatedAuthorInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishCreateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterCreateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserCreateOneWithoutCreatedCategoriesInput>;
}

export interface DeaneryCreateManyWithoutDioceseInput {
  create?: Maybe<
    DeaneryCreateWithoutDioceseInput[] | DeaneryCreateWithoutDioceseInput
  >;
  connect?: Maybe<DeaneryWhereUniqueInput[] | DeaneryWhereUniqueInput>;
}

export interface CategoryCreateWithoutCreatedAuthorInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishCreateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterCreateManyWithoutCategoryInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedCategoriesInput>;
}

export interface DeaneryCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  parishes?: Maybe<ParishCreateManyWithoutDeaneryInput>;
  diocese?: Maybe<DioceseCreateOneWithoutDeaneriesInput>;
}

export interface PosterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  imageType?: Maybe<ImageTypeWhereInput>;
  category?: Maybe<CategoryWhereInput>;
  createdAuthor?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAuthor?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PosterWhereInput[] | PosterWhereInput>;
  OR?: Maybe<PosterWhereInput[] | PosterWhereInput>;
  NOT?: Maybe<PosterWhereInput[] | PosterWhereInput>;
}

export interface ParishCreateManyWithoutDeaneryInput {
  create?: Maybe<
    ParishCreateWithoutDeaneryInput[] | ParishCreateWithoutDeaneryInput
  >;
  connect?: Maybe<ParishWhereUniqueInput[] | ParishWhereUniqueInput>;
}

export interface ParishSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ParishWhereInput>;
  AND?: Maybe<ParishSubscriptionWhereInput[] | ParishSubscriptionWhereInput>;
  OR?: Maybe<ParishSubscriptionWhereInput[] | ParishSubscriptionWhereInput>;
  NOT?: Maybe<ParishSubscriptionWhereInput[] | ParishSubscriptionWhereInput>;
}

export interface ParishCreateWithoutDeaneryInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  categories?: Maybe<CategoryCreateManyWithoutParishInput>;
}

export type DeaneryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryCreateManyWithoutParishInput {
  create?: Maybe<
    CategoryCreateWithoutParishInput[] | CategoryCreateWithoutParishInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface PosterUpdateWithoutImageTypeDataInput {
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserUpdateOneInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedPostersInput>;
}

export interface CategoryCreateWithoutParishInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  posters?: Maybe<PosterCreateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserCreateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedCategoriesInput>;
}

export interface ImageTypeCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  posters?: Maybe<PosterCreateManyWithoutImageTypeInput>;
}

export interface DeaneryUpdateInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  parishes?: Maybe<ParishUpdateManyWithoutDeaneryInput>;
  diocese?: Maybe<DioceseUpdateOneWithoutDeaneriesInput>;
}

export interface DeaneryUpdateWithoutDioceseDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  parishes?: Maybe<ParishUpdateManyWithoutDeaneryInput>;
}

export interface ParishUpdateManyWithoutDeaneryInput {
  create?: Maybe<
    ParishCreateWithoutDeaneryInput[] | ParishCreateWithoutDeaneryInput
  >;
  delete?: Maybe<ParishWhereUniqueInput[] | ParishWhereUniqueInput>;
  connect?: Maybe<ParishWhereUniqueInput[] | ParishWhereUniqueInput>;
  set?: Maybe<ParishWhereUniqueInput[] | ParishWhereUniqueInput>;
  disconnect?: Maybe<ParishWhereUniqueInput[] | ParishWhereUniqueInput>;
  update?: Maybe<
    | ParishUpdateWithWhereUniqueWithoutDeaneryInput[]
    | ParishUpdateWithWhereUniqueWithoutDeaneryInput
  >;
  upsert?: Maybe<
    | ParishUpsertWithWhereUniqueWithoutDeaneryInput[]
    | ParishUpsertWithWhereUniqueWithoutDeaneryInput
  >;
  deleteMany?: Maybe<ParishScalarWhereInput[] | ParishScalarWhereInput>;
  updateMany?: Maybe<
    | ParishUpdateManyWithWhereNestedInput[]
    | ParishUpdateManyWithWhereNestedInput
  >;
}

export interface DeaneryCreateWithoutParishesInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  diocese?: Maybe<DioceseCreateOneWithoutDeaneriesInput>;
}

export interface ParishUpdateWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput;
  data: ParishUpdateWithoutDeaneryDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterCreateManyInput>;
  createdCategories?: Maybe<CategoryCreateManyWithoutCreatedAuthorInput>;
  updatedPosters?: Maybe<PosterCreateManyWithoutUpdatedAuthorInput>;
  updatedCategories?: Maybe<CategoryCreateManyWithoutUpdatedAuthorInput>;
}

export interface ParishUpdateWithoutDeaneryDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutParishInput>;
}

export interface PosterCreateWithoutUpdatedAuthorInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeCreateOneWithoutPostersInput>;
  category?: Maybe<CategoryCreateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserCreateOneInput>;
}

export interface CategoryUpdateManyWithoutParishInput {
  create?: Maybe<
    CategoryCreateWithoutParishInput[] | CategoryCreateWithoutParishInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutParishInput[]
    | CategoryUpdateWithWhereUniqueWithoutParishInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutParishInput[]
    | CategoryUpsertWithWhereUniqueWithoutParishInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutUpdatedPostersInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterCreateManyInput>;
  createdCategories?: Maybe<CategoryCreateManyWithoutCreatedAuthorInput>;
  updatedCategories?: Maybe<CategoryCreateManyWithoutUpdatedAuthorInput>;
}

export interface CategoryUpdateWithWhereUniqueWithoutParishInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutParishDataInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CategoryUpdateWithoutParishDataInput {
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  posters?: Maybe<PosterUpdateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserUpdateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserUpdateOneWithoutUpdatedCategoriesInput>;
}

export interface ImageTypeUpdateInput {
  name?: Maybe<String>;
  posters?: Maybe<PosterUpdateManyWithoutImageTypeInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutParishInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutParishDataInput;
  create: CategoryCreateWithoutParishInput;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishCreateOneWithoutCategoriesInput>;
  posters?: Maybe<PosterCreateManyWithoutCategoryInput>;
  createdAuthor?: Maybe<UserCreateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedCategoriesInput>;
}

export interface ParishUpsertWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput;
  update: ParishUpdateWithoutDeaneryDataInput;
  create: ParishCreateWithoutDeaneryInput;
}

export interface CategoryCreateWithoutPostersInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  parish?: Maybe<ParishCreateOneWithoutCategoriesInput>;
  createdAuthor?: Maybe<UserCreateOneWithoutCreatedCategoriesInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedCategoriesInput>;
}

export interface DeaneryUpdateManyMutationInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface ParishUpdateManyDataInput {
  name?: Maybe<String>;
  shortName?: Maybe<String>;
}

export interface ParishUpdateManyWithWhereNestedInput {
  where: ParishScalarWhereInput;
  data: ParishUpdateManyDataInput;
}

export interface ParishScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  shortName?: Maybe<String>;
  shortName_not?: Maybe<String>;
  shortName_in?: Maybe<String[] | String>;
  shortName_not_in?: Maybe<String[] | String>;
  shortName_lt?: Maybe<String>;
  shortName_lte?: Maybe<String>;
  shortName_gt?: Maybe<String>;
  shortName_gte?: Maybe<String>;
  shortName_contains?: Maybe<String>;
  shortName_not_contains?: Maybe<String>;
  shortName_starts_with?: Maybe<String>;
  shortName_not_starts_with?: Maybe<String>;
  shortName_ends_with?: Maybe<String>;
  shortName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ParishScalarWhereInput[] | ParishScalarWhereInput>;
  OR?: Maybe<ParishScalarWhereInput[] | ParishScalarWhereInput>;
  NOT?: Maybe<ParishScalarWhereInput[] | ParishScalarWhereInput>;
}

export interface UserCreateWithoutUpdatedCategoriesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name?: Maybe<String>;
  createdPosters?: Maybe<PosterCreateManyInput>;
  createdCategories?: Maybe<CategoryCreateManyWithoutCreatedAuthorInput>;
  updatedPosters?: Maybe<PosterCreateManyWithoutUpdatedAuthorInput>;
}

export interface PosterCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  thumbnail?: Maybe<String>;
  description?: Maybe<String>;
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  imageType?: Maybe<ImageTypeCreateOneWithoutPostersInput>;
  createdAuthor?: Maybe<UserCreateOneInput>;
  updatedAuthor?: Maybe<UserCreateOneWithoutUpdatedPostersInput>;
}

export interface DeaneryUpdateManyWithWhereNestedInput {
  where: DeaneryScalarWhereInput;
  data: DeaneryUpdateManyDataInput;
}

export type DioceseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeaneryEdge {
  node: Deanery;
  cursor: String;
}

export interface DeaneryEdgePromise extends Promise<DeaneryEdge>, Fragmentable {
  node: <T = DeaneryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeaneryEdgeSubscription
  extends Promise<AsyncIterator<DeaneryEdge>>,
    Fragmentable {
  node: <T = DeanerySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Diocese {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DiocesePromise extends Promise<Diocese>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  deaneries: <T = FragmentableArray<Deanery>>(args?: {
    where?: DeaneryWhereInput;
    orderBy?: DeaneryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DioceseSubscription
  extends Promise<AsyncIterator<Diocese>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  deaneries: <T = Promise<AsyncIterator<DeanerySubscription>>>(args?: {
    where?: DeaneryWhereInput;
    orderBy?: DeaneryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DioceseNullablePromise
  extends Promise<Diocese | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  deaneries: <T = FragmentableArray<Deanery>>(args?: {
    where?: DeaneryWhereInput;
    orderBy?: DeaneryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeaneryConnection {
  pageInfo: PageInfo;
  edges: DeaneryEdge[];
}

export interface DeaneryConnectionPromise
  extends Promise<DeaneryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeaneryEdge>>() => T;
  aggregate: <T = AggregateDeaneryPromise>() => T;
}

export interface DeaneryConnectionSubscription
  extends Promise<AsyncIterator<DeaneryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeaneryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeanerySubscription>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePoster {
  count: Int;
}

export interface AggregatePosterPromise
  extends Promise<AggregatePoster>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePosterSubscription
  extends Promise<AsyncIterator<AggregatePoster>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PosterConnection {
  pageInfo: PageInfo;
  edges: PosterEdge[];
}

export interface PosterConnectionPromise
  extends Promise<PosterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PosterEdge>>() => T;
  aggregate: <T = AggregatePosterPromise>() => T;
}

export interface PosterConnectionSubscription
  extends Promise<AsyncIterator<PosterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PosterEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePosterSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  name: String;
  published: Boolean;
  title?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  parish: <T = ParishPromise>() => T;
  posters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAuthor: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAuthor: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  parish: <T = ParishSubscription>() => T;
  posters: <T = Promise<AsyncIterator<PosterSubscription>>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAuthor: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAuthor: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  parish: <T = ParishPromise>() => T;
  posters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAuthor: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAuthor: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParishEdge {
  node: Parish;
  cursor: String;
}

export interface ParishEdgePromise extends Promise<ParishEdge>, Fragmentable {
  node: <T = ParishPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ParishEdgeSubscription
  extends Promise<AsyncIterator<ParishEdge>>,
    Fragmentable {
  node: <T = ParishSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface AggregateImageType {
  count: Int;
}

export interface AggregateImageTypePromise
  extends Promise<AggregateImageType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageTypeSubscription
  extends Promise<AsyncIterator<AggregateImageType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  published: Boolean;
  title?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageTypeConnection {
  pageInfo: PageInfo;
  edges: ImageTypeEdge[];
}

export interface ImageTypeConnectionPromise
  extends Promise<ImageTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageTypeEdge>>() => T;
  aggregate: <T = AggregateImageTypePromise>() => T;
}

export interface ImageTypeConnectionSubscription
  extends Promise<AsyncIterator<ImageTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageTypeSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdPosters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCategories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedPosters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedCategories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdPosters: <T = Promise<AsyncIterator<PosterSubscription>>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCategories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedPosters: <T = Promise<AsyncIterator<PosterSubscription>>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedCategories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdPosters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCategories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedPosters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedCategories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateDiocese {
  count: Int;
}

export interface AggregateDiocesePromise
  extends Promise<AggregateDiocese>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDioceseSubscription
  extends Promise<AsyncIterator<AggregateDiocese>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DeanerySubscriptionPayload {
  mutation: MutationType;
  node: Deanery;
  updatedFields: String[];
  previousValues: DeaneryPreviousValues;
}

export interface DeanerySubscriptionPayloadPromise
  extends Promise<DeanerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeaneryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeaneryPreviousValuesPromise>() => T;
}

export interface DeanerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeanerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeanerySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeaneryPreviousValuesSubscription>() => T;
}

export interface DioceseConnection {
  pageInfo: PageInfo;
  edges: DioceseEdge[];
}

export interface DioceseConnectionPromise
  extends Promise<DioceseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DioceseEdge>>() => T;
  aggregate: <T = AggregateDiocesePromise>() => T;
}

export interface DioceseConnectionSubscription
  extends Promise<AsyncIterator<DioceseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DioceseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDioceseSubscription>() => T;
}

export interface DeaneryPreviousValues {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DeaneryPreviousValuesPromise
  extends Promise<DeaneryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeaneryPreviousValuesSubscription
  extends Promise<AsyncIterator<DeaneryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateDeanery {
  count: Int;
}

export interface AggregateDeaneryPromise
  extends Promise<AggregateDeanery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeanerySubscription
  extends Promise<AsyncIterator<AggregateDeanery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImageType {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImageTypePromise extends Promise<ImageType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageTypeSubscription
  extends Promise<AsyncIterator<ImageType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  posters: <T = Promise<AsyncIterator<PosterSubscription>>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageTypeNullablePromise
  extends Promise<ImageType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  posters: <T = FragmentableArray<Poster>>(args?: {
    where?: PosterWhereInput;
    orderBy?: PosterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DioceseSubscriptionPayload {
  mutation: MutationType;
  node: Diocese;
  updatedFields: String[];
  previousValues: DiocesePreviousValues;
}

export interface DioceseSubscriptionPayloadPromise
  extends Promise<DioceseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiocesePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiocesePreviousValuesPromise>() => T;
}

export interface DioceseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DioceseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DioceseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiocesePreviousValuesSubscription>() => T;
}

export interface PosterEdge {
  node: Poster;
  cursor: String;
}

export interface PosterEdgePromise extends Promise<PosterEdge>, Fragmentable {
  node: <T = PosterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PosterEdgeSubscription
  extends Promise<AsyncIterator<PosterEdge>>,
    Fragmentable {
  node: <T = PosterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DiocesePreviousValues {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DiocesePreviousValuesPromise
  extends Promise<DiocesePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DiocesePreviousValuesSubscription
  extends Promise<AsyncIterator<DiocesePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParishConnection {
  pageInfo: PageInfo;
  edges: ParishEdge[];
}

export interface ParishConnectionPromise
  extends Promise<ParishConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ParishEdge>>() => T;
  aggregate: <T = AggregateParishPromise>() => T;
}

export interface ParishConnectionSubscription
  extends Promise<AsyncIterator<ParishConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParishEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParishSubscription>() => T;
}

export interface Poster {
  id: ID_Output;
  name: String;
  image?: String;
  thumbnail?: String;
  description?: String;
  published: Boolean;
  title?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PosterPromise extends Promise<Poster>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  imageType: <T = ImageTypePromise>() => T;
  category: <T = CategoryPromise>() => T;
  createdAuthor: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAuthor: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PosterSubscription
  extends Promise<AsyncIterator<Poster>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  imageType: <T = ImageTypeSubscription>() => T;
  category: <T = CategorySubscription>() => T;
  createdAuthor: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAuthor: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PosterNullablePromise
  extends Promise<Poster | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  imageType: <T = ImageTypePromise>() => T;
  category: <T = CategoryPromise>() => T;
  createdAuthor: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAuthor: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PosterSubscriptionPayload {
  mutation: MutationType;
  node: Poster;
  updatedFields: String[];
  previousValues: PosterPreviousValues;
}

export interface PosterSubscriptionPayloadPromise
  extends Promise<PosterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PosterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PosterPreviousValuesPromise>() => T;
}

export interface PosterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PosterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PosterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PosterPreviousValuesSubscription>() => T;
}

export interface ImageTypeSubscriptionPayload {
  mutation: MutationType;
  node: ImageType;
  updatedFields: String[];
  previousValues: ImageTypePreviousValues;
}

export interface ImageTypeSubscriptionPayloadPromise
  extends Promise<ImageTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImageTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImageTypePreviousValuesPromise>() => T;
}

export interface ImageTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImageTypePreviousValuesSubscription>() => T;
}

export interface Parish {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParishPromise extends Promise<Parish>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  deanery: <T = DeaneryPromise>() => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParishSubscription
  extends Promise<AsyncIterator<Parish>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  deanery: <T = DeanerySubscription>() => T;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParishNullablePromise
  extends Promise<Parish | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  deanery: <T = DeaneryPromise>() => T;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PosterPreviousValues {
  id: ID_Output;
  name: String;
  image?: String;
  thumbnail?: String;
  description?: String;
  published: Boolean;
  title?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PosterPreviousValuesPromise
  extends Promise<PosterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  thumbnail: () => Promise<String>;
  description: () => Promise<String>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PosterPreviousValuesSubscription
  extends Promise<AsyncIterator<PosterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParishPreviousValues {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParishPreviousValuesPromise
  extends Promise<ParishPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParishPreviousValuesSubscription
  extends Promise<AsyncIterator<ParishPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParishSubscriptionPayload {
  mutation: MutationType;
  node: Parish;
  updatedFields: String[];
  previousValues: ParishPreviousValues;
}

export interface ParishSubscriptionPayloadPromise
  extends Promise<ParishSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ParishPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParishPreviousValuesPromise>() => T;
}

export interface ParishSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParishSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParishSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParishPreviousValuesSubscription>() => T;
}

export interface Deanery {
  id: ID_Output;
  name: String;
  shortName?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DeaneryPromise extends Promise<Deanery>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  parishes: <T = FragmentableArray<Parish>>(args?: {
    where?: ParishWhereInput;
    orderBy?: ParishOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diocese: <T = DiocesePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeanerySubscription
  extends Promise<AsyncIterator<Deanery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  shortName: () => Promise<AsyncIterator<String>>;
  parishes: <T = Promise<AsyncIterator<ParishSubscription>>>(args?: {
    where?: ParishWhereInput;
    orderBy?: ParishOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diocese: <T = DioceseSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeaneryNullablePromise
  extends Promise<Deanery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  shortName: () => Promise<String>;
  parishes: <T = FragmentableArray<Parish>>(args?: {
    where?: ParishWhereInput;
    orderBy?: ParishOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  diocese: <T = DiocesePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageTypePreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImageTypePreviousValuesPromise
  extends Promise<ImageTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageTypePreviousValuesSubscription
  extends Promise<AsyncIterator<ImageTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateParish {
  count: Int;
}

export interface AggregateParishPromise
  extends Promise<AggregateParish>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParishSubscription
  extends Promise<AsyncIterator<AggregateParish>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface DioceseEdge {
  node: Diocese;
  cursor: String;
}

export interface DioceseEdgePromise extends Promise<DioceseEdge>, Fragmentable {
  node: <T = DiocesePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DioceseEdgeSubscription
  extends Promise<AsyncIterator<DioceseEdge>>,
    Fragmentable {
  node: <T = DioceseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ImageTypeEdge {
  node: ImageType;
  cursor: String;
}

export interface ImageTypeEdgePromise
  extends Promise<ImageTypeEdge>,
    Fragmentable {
  node: <T = ImageTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageTypeEdgeSubscription
  extends Promise<AsyncIterator<ImageTypeEdge>>,
    Fragmentable {
  node: <T = ImageTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Poster",
    embedded: false
  },
  {
    name: "ImageType",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Parish",
    embedded: false
  },
  {
    name: "Deanery",
    embedded: false
  },
  {
    name: "Diocese",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
