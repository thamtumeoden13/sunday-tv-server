module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAlbum {
  count: Int!
}

type AggregateDeanery {
  count: Int!
}

type AggregateDiocese {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateParish {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Album {
  id: ID!
  name: String!
  createdAt: DateTime!
  updateAt: DateTime
  parish: Parish!
  image(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
}

type AlbumConnection {
  pageInfo: PageInfo!
  edges: [AlbumEdge]!
  aggregate: AggregateAlbum!
}

input AlbumCreateInput {
  id: ID
  name: String!
  updateAt: DateTime
  parish: ParishCreateOneWithoutAlbumInput!
  image: ImageCreateManyWithoutAlbumInput
}

input AlbumCreateOneWithoutImageInput {
  create: AlbumCreateWithoutImageInput
  connect: AlbumWhereUniqueInput
}

input AlbumCreateOneWithoutParishInput {
  create: AlbumCreateWithoutParishInput
  connect: AlbumWhereUniqueInput
}

input AlbumCreateWithoutImageInput {
  id: ID
  name: String!
  updateAt: DateTime
  parish: ParishCreateOneWithoutAlbumInput!
}

input AlbumCreateWithoutParishInput {
  id: ID
  name: String!
  updateAt: DateTime
  image: ImageCreateManyWithoutAlbumInput
}

type AlbumEdge {
  node: Album!
  cursor: String!
}

enum AlbumOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updateAt_ASC
  updateAt_DESC
}

type AlbumPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updateAt: DateTime
}

type AlbumSubscriptionPayload {
  mutation: MutationType!
  node: Album
  updatedFields: [String!]
  previousValues: AlbumPreviousValues
}

input AlbumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AlbumWhereInput
  AND: [AlbumSubscriptionWhereInput!]
  OR: [AlbumSubscriptionWhereInput!]
  NOT: [AlbumSubscriptionWhereInput!]
}

input AlbumUpdateInput {
  name: String
  updateAt: DateTime
  parish: ParishUpdateOneRequiredWithoutAlbumInput
  image: ImageUpdateManyWithoutAlbumInput
}

input AlbumUpdateManyMutationInput {
  name: String
  updateAt: DateTime
}

input AlbumUpdateOneRequiredWithoutParishInput {
  create: AlbumCreateWithoutParishInput
  update: AlbumUpdateWithoutParishDataInput
  upsert: AlbumUpsertWithoutParishInput
  connect: AlbumWhereUniqueInput
}

input AlbumUpdateOneWithoutImageInput {
  create: AlbumCreateWithoutImageInput
  update: AlbumUpdateWithoutImageDataInput
  upsert: AlbumUpsertWithoutImageInput
  delete: Boolean
  disconnect: Boolean
  connect: AlbumWhereUniqueInput
}

input AlbumUpdateWithoutImageDataInput {
  name: String
  updateAt: DateTime
  parish: ParishUpdateOneRequiredWithoutAlbumInput
}

input AlbumUpdateWithoutParishDataInput {
  name: String
  updateAt: DateTime
  image: ImageUpdateManyWithoutAlbumInput
}

input AlbumUpsertWithoutImageInput {
  update: AlbumUpdateWithoutImageDataInput!
  create: AlbumCreateWithoutImageInput!
}

input AlbumUpsertWithoutParishInput {
  update: AlbumUpdateWithoutParishDataInput!
  create: AlbumCreateWithoutParishInput!
}

input AlbumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  parish: ParishWhereInput
  image_every: ImageWhereInput
  image_some: ImageWhereInput
  image_none: ImageWhereInput
  AND: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
}

input AlbumWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Deanery {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
  shortName: String!
  parish(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parish!]
  diocese: Diocese
}

type DeaneryConnection {
  pageInfo: PageInfo!
  edges: [DeaneryEdge]!
  aggregate: AggregateDeanery!
}

input DeaneryCreateInput {
  id: ID
  updateAt: DateTime
  name: String!
  shortName: String!
  parish: ParishCreateManyWithoutDeaneryInput
  diocese: DioceseCreateOneWithoutDeaneryInput
}

input DeaneryCreateManyWithoutDioceseInput {
  create: [DeaneryCreateWithoutDioceseInput!]
  connect: [DeaneryWhereUniqueInput!]
}

input DeaneryCreateOneWithoutParishInput {
  create: DeaneryCreateWithoutParishInput
  connect: DeaneryWhereUniqueInput
}

input DeaneryCreateWithoutDioceseInput {
  id: ID
  updateAt: DateTime
  name: String!
  shortName: String!
  parish: ParishCreateManyWithoutDeaneryInput
}

input DeaneryCreateWithoutParishInput {
  id: ID
  updateAt: DateTime
  name: String!
  shortName: String!
  diocese: DioceseCreateOneWithoutDeaneryInput
}

type DeaneryEdge {
  node: Deanery!
  cursor: String!
}

enum DeaneryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updateAt_ASC
  updateAt_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
}

type DeaneryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
  shortName: String!
}

input DeaneryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  AND: [DeaneryScalarWhereInput!]
  OR: [DeaneryScalarWhereInput!]
  NOT: [DeaneryScalarWhereInput!]
}

type DeanerySubscriptionPayload {
  mutation: MutationType!
  node: Deanery
  updatedFields: [String!]
  previousValues: DeaneryPreviousValues
}

input DeanerySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeaneryWhereInput
  AND: [DeanerySubscriptionWhereInput!]
  OR: [DeanerySubscriptionWhereInput!]
  NOT: [DeanerySubscriptionWhereInput!]
}

input DeaneryUpdateInput {
  updateAt: DateTime
  name: String
  shortName: String
  parish: ParishUpdateManyWithoutDeaneryInput
  diocese: DioceseUpdateOneWithoutDeaneryInput
}

input DeaneryUpdateManyDataInput {
  updateAt: DateTime
  name: String
  shortName: String
}

input DeaneryUpdateManyMutationInput {
  updateAt: DateTime
  name: String
  shortName: String
}

input DeaneryUpdateManyWithoutDioceseInput {
  create: [DeaneryCreateWithoutDioceseInput!]
  delete: [DeaneryWhereUniqueInput!]
  connect: [DeaneryWhereUniqueInput!]
  set: [DeaneryWhereUniqueInput!]
  disconnect: [DeaneryWhereUniqueInput!]
  update: [DeaneryUpdateWithWhereUniqueWithoutDioceseInput!]
  upsert: [DeaneryUpsertWithWhereUniqueWithoutDioceseInput!]
  deleteMany: [DeaneryScalarWhereInput!]
  updateMany: [DeaneryUpdateManyWithWhereNestedInput!]
}

input DeaneryUpdateManyWithWhereNestedInput {
  where: DeaneryScalarWhereInput!
  data: DeaneryUpdateManyDataInput!
}

input DeaneryUpdateOneWithoutParishInput {
  create: DeaneryCreateWithoutParishInput
  update: DeaneryUpdateWithoutParishDataInput
  upsert: DeaneryUpsertWithoutParishInput
  delete: Boolean
  disconnect: Boolean
  connect: DeaneryWhereUniqueInput
}

input DeaneryUpdateWithoutDioceseDataInput {
  updateAt: DateTime
  name: String
  shortName: String
  parish: ParishUpdateManyWithoutDeaneryInput
}

input DeaneryUpdateWithoutParishDataInput {
  updateAt: DateTime
  name: String
  shortName: String
  diocese: DioceseUpdateOneWithoutDeaneryInput
}

input DeaneryUpdateWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput!
  data: DeaneryUpdateWithoutDioceseDataInput!
}

input DeaneryUpsertWithoutParishInput {
  update: DeaneryUpdateWithoutParishDataInput!
  create: DeaneryCreateWithoutParishInput!
}

input DeaneryUpsertWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput!
  update: DeaneryUpdateWithoutDioceseDataInput!
  create: DeaneryCreateWithoutDioceseInput!
}

input DeaneryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  parish_every: ParishWhereInput
  parish_some: ParishWhereInput
  parish_none: ParishWhereInput
  diocese: DioceseWhereInput
  AND: [DeaneryWhereInput!]
  OR: [DeaneryWhereInput!]
  NOT: [DeaneryWhereInput!]
}

input DeaneryWhereUniqueInput {
  id: ID
}

type Diocese {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
  shortName: String!
  deanery(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deanery!]
}

type DioceseConnection {
  pageInfo: PageInfo!
  edges: [DioceseEdge]!
  aggregate: AggregateDiocese!
}

input DioceseCreateInput {
  id: ID
  updateAt: DateTime
  name: String!
  shortName: String!
  deanery: DeaneryCreateManyWithoutDioceseInput
}

input DioceseCreateOneWithoutDeaneryInput {
  create: DioceseCreateWithoutDeaneryInput
  connect: DioceseWhereUniqueInput
}

input DioceseCreateWithoutDeaneryInput {
  id: ID
  updateAt: DateTime
  name: String!
  shortName: String!
}

type DioceseEdge {
  node: Diocese!
  cursor: String!
}

enum DioceseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updateAt_ASC
  updateAt_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
}

type DiocesePreviousValues {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
  shortName: String!
}

type DioceseSubscriptionPayload {
  mutation: MutationType!
  node: Diocese
  updatedFields: [String!]
  previousValues: DiocesePreviousValues
}

input DioceseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DioceseWhereInput
  AND: [DioceseSubscriptionWhereInput!]
  OR: [DioceseSubscriptionWhereInput!]
  NOT: [DioceseSubscriptionWhereInput!]
}

input DioceseUpdateInput {
  updateAt: DateTime
  name: String
  shortName: String
  deanery: DeaneryUpdateManyWithoutDioceseInput
}

input DioceseUpdateManyMutationInput {
  updateAt: DateTime
  name: String
  shortName: String
}

input DioceseUpdateOneWithoutDeaneryInput {
  create: DioceseCreateWithoutDeaneryInput
  update: DioceseUpdateWithoutDeaneryDataInput
  upsert: DioceseUpsertWithoutDeaneryInput
  delete: Boolean
  disconnect: Boolean
  connect: DioceseWhereUniqueInput
}

input DioceseUpdateWithoutDeaneryDataInput {
  updateAt: DateTime
  name: String
  shortName: String
}

input DioceseUpsertWithoutDeaneryInput {
  update: DioceseUpdateWithoutDeaneryDataInput!
  create: DioceseCreateWithoutDeaneryInput!
}

input DioceseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  deanery_every: DeaneryWhereInput
  deanery_some: DeaneryWhereInput
  deanery_none: DeaneryWhereInput
  AND: [DioceseWhereInput!]
  OR: [DioceseWhereInput!]
  NOT: [DioceseWhereInput!]
}

input DioceseWhereUniqueInput {
  id: ID
}

type Image {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
  album: Album
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
  album: AlbumCreateOneWithoutImageInput
}

input ImageCreateManyWithoutAlbumInput {
  create: [ImageCreateWithoutAlbumInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateWithoutAlbumInput {
  id: ID
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updateAt_ASC
  updateAt_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  thumbnail_ASC
  thumbnail_DESC
  description_ASC
  description_DESC
}

type ImagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
}

input ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateInput {
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
  album: AlbumUpdateOneWithoutImageInput
}

input ImageUpdateManyDataInput {
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
}

input ImageUpdateManyMutationInput {
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
}

input ImageUpdateManyWithoutAlbumInput {
  create: [ImageCreateWithoutAlbumInput!]
  delete: [ImageWhereUniqueInput!]
  connect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutAlbumInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutAlbumInput!]
  deleteMany: [ImageScalarWhereInput!]
  updateMany: [ImageUpdateManyWithWhereNestedInput!]
}

input ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput!
  data: ImageUpdateManyDataInput!
}

input ImageUpdateWithoutAlbumDataInput {
  updateAt: DateTime
  name: String
  picture: String
  thumbnail: String
  description: String
}

input ImageUpdateWithWhereUniqueWithoutAlbumInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateWithoutAlbumDataInput!
}

input ImageUpsertWithWhereUniqueWithoutAlbumInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateWithoutAlbumDataInput!
  create: ImageCreateWithoutAlbumInput!
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  album: AlbumWhereInput
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAlbum(data: AlbumCreateInput!): Album!
  updateAlbum(data: AlbumUpdateInput!, where: AlbumWhereUniqueInput!): Album
  updateManyAlbums(data: AlbumUpdateManyMutationInput!, where: AlbumWhereInput): BatchPayload!
  upsertAlbum(where: AlbumWhereUniqueInput!, create: AlbumCreateInput!, update: AlbumUpdateInput!): Album!
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteManyAlbums(where: AlbumWhereInput): BatchPayload!
  createDeanery(data: DeaneryCreateInput!): Deanery!
  updateDeanery(data: DeaneryUpdateInput!, where: DeaneryWhereUniqueInput!): Deanery
  updateManyDeaneries(data: DeaneryUpdateManyMutationInput!, where: DeaneryWhereInput): BatchPayload!
  upsertDeanery(where: DeaneryWhereUniqueInput!, create: DeaneryCreateInput!, update: DeaneryUpdateInput!): Deanery!
  deleteDeanery(where: DeaneryWhereUniqueInput!): Deanery
  deleteManyDeaneries(where: DeaneryWhereInput): BatchPayload!
  createDiocese(data: DioceseCreateInput!): Diocese!
  updateDiocese(data: DioceseUpdateInput!, where: DioceseWhereUniqueInput!): Diocese
  updateManyDioceses(data: DioceseUpdateManyMutationInput!, where: DioceseWhereInput): BatchPayload!
  upsertDiocese(where: DioceseWhereUniqueInput!, create: DioceseCreateInput!, update: DioceseUpdateInput!): Diocese!
  deleteDiocese(where: DioceseWhereUniqueInput!): Diocese
  deleteManyDioceses(where: DioceseWhereInput): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createParish(data: ParishCreateInput!): Parish!
  updateParish(data: ParishUpdateInput!, where: ParishWhereUniqueInput!): Parish
  updateManyParishes(data: ParishUpdateManyMutationInput!, where: ParishWhereInput): BatchPayload!
  upsertParish(where: ParishWhereUniqueInput!, create: ParishCreateInput!, update: ParishUpdateInput!): Parish!
  deleteParish(where: ParishWhereUniqueInput!): Parish
  deleteManyParishes(where: ParishWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parish {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
  deanery: Deanery
  Album: Album!
}

type ParishConnection {
  pageInfo: PageInfo!
  edges: [ParishEdge]!
  aggregate: AggregateParish!
}

input ParishCreateInput {
  id: ID
  updateAt: DateTime
  name: String!
  deanery: DeaneryCreateOneWithoutParishInput
  Album: AlbumCreateOneWithoutParishInput!
}

input ParishCreateManyWithoutDeaneryInput {
  create: [ParishCreateWithoutDeaneryInput!]
  connect: [ParishWhereUniqueInput!]
}

input ParishCreateOneWithoutAlbumInput {
  create: ParishCreateWithoutAlbumInput
  connect: ParishWhereUniqueInput
}

input ParishCreateWithoutAlbumInput {
  id: ID
  updateAt: DateTime
  name: String!
  deanery: DeaneryCreateOneWithoutParishInput
}

input ParishCreateWithoutDeaneryInput {
  id: ID
  updateAt: DateTime
  name: String!
  Album: AlbumCreateOneWithoutParishInput!
}

type ParishEdge {
  node: Parish!
  cursor: String!
}

enum ParishOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updateAt_ASC
  updateAt_DESC
  name_ASC
  name_DESC
}

type ParishPreviousValues {
  id: ID!
  createdAt: DateTime!
  updateAt: DateTime
  name: String!
}

input ParishScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ParishScalarWhereInput!]
  OR: [ParishScalarWhereInput!]
  NOT: [ParishScalarWhereInput!]
}

type ParishSubscriptionPayload {
  mutation: MutationType!
  node: Parish
  updatedFields: [String!]
  previousValues: ParishPreviousValues
}

input ParishSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParishWhereInput
  AND: [ParishSubscriptionWhereInput!]
  OR: [ParishSubscriptionWhereInput!]
  NOT: [ParishSubscriptionWhereInput!]
}

input ParishUpdateInput {
  updateAt: DateTime
  name: String
  deanery: DeaneryUpdateOneWithoutParishInput
  Album: AlbumUpdateOneRequiredWithoutParishInput
}

input ParishUpdateManyDataInput {
  updateAt: DateTime
  name: String
}

input ParishUpdateManyMutationInput {
  updateAt: DateTime
  name: String
}

input ParishUpdateManyWithoutDeaneryInput {
  create: [ParishCreateWithoutDeaneryInput!]
  delete: [ParishWhereUniqueInput!]
  connect: [ParishWhereUniqueInput!]
  set: [ParishWhereUniqueInput!]
  disconnect: [ParishWhereUniqueInput!]
  update: [ParishUpdateWithWhereUniqueWithoutDeaneryInput!]
  upsert: [ParishUpsertWithWhereUniqueWithoutDeaneryInput!]
  deleteMany: [ParishScalarWhereInput!]
  updateMany: [ParishUpdateManyWithWhereNestedInput!]
}

input ParishUpdateManyWithWhereNestedInput {
  where: ParishScalarWhereInput!
  data: ParishUpdateManyDataInput!
}

input ParishUpdateOneRequiredWithoutAlbumInput {
  create: ParishCreateWithoutAlbumInput
  update: ParishUpdateWithoutAlbumDataInput
  upsert: ParishUpsertWithoutAlbumInput
  connect: ParishWhereUniqueInput
}

input ParishUpdateWithoutAlbumDataInput {
  updateAt: DateTime
  name: String
  deanery: DeaneryUpdateOneWithoutParishInput
}

input ParishUpdateWithoutDeaneryDataInput {
  updateAt: DateTime
  name: String
  Album: AlbumUpdateOneRequiredWithoutParishInput
}

input ParishUpdateWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput!
  data: ParishUpdateWithoutDeaneryDataInput!
}

input ParishUpsertWithoutAlbumInput {
  update: ParishUpdateWithoutAlbumDataInput!
  create: ParishCreateWithoutAlbumInput!
}

input ParishUpsertWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput!
  update: ParishUpdateWithoutDeaneryDataInput!
  create: ParishCreateWithoutDeaneryInput!
}

input ParishWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  deanery: DeaneryWhereInput
  Album: AlbumWhereInput
  AND: [ParishWhereInput!]
  OR: [ParishWhereInput!]
  NOT: [ParishWhereInput!]
}

input ParishWhereUniqueInput {
  id: ID
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  published: Boolean
  title: String!
  content: String
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  published: Boolean
  title: String!
  content: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  album(where: AlbumWhereUniqueInput!): Album
  albums(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Album]!
  albumsConnection(where: AlbumWhereInput, orderBy: AlbumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlbumConnection!
  deanery(where: DeaneryWhereUniqueInput!): Deanery
  deaneries(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deanery]!
  deaneriesConnection(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeaneryConnection!
  diocese(where: DioceseWhereUniqueInput!): Diocese
  dioceses(where: DioceseWhereInput, orderBy: DioceseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diocese]!
  diocesesConnection(where: DioceseWhereInput, orderBy: DioceseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DioceseConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  parish(where: ParishWhereUniqueInput!): Parish
  parishes(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parish]!
  parishesConnection(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParishConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  album(where: AlbumSubscriptionWhereInput): AlbumSubscriptionPayload
  deanery(where: DeanerySubscriptionWhereInput): DeanerySubscriptionPayload
  diocese(where: DioceseSubscriptionWhereInput): DioceseSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  parish(where: ParishSubscriptionWhereInput): ParishSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  name: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String!
  name: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  name: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    