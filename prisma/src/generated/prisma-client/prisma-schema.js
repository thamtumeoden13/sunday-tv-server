module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateDeanery {
  count: Int!
}

type AggregateDiocese {
  count: Int!
}

type AggregateImageType {
  count: Int!
}

type AggregateParish {
  count: Int!
}

type AggregatePoster {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  name: String!
  published: Boolean!
  title: String
  content: String
  parish: Parish
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster!]
  createdAuthor: User
  createdAt: DateTime!
  updatedAuthor: User
  updatedAt: DateTime!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishCreateOneWithoutCategoriesInput
  posters: PosterCreateManyWithoutCategoryInput
  createdAuthor: UserCreateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserCreateOneWithoutUpdatedCategoriesInput
}

input CategoryCreateManyWithoutCreatedAuthorInput {
  create: [CategoryCreateWithoutCreatedAuthorInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutParishInput {
  create: [CategoryCreateWithoutParishInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutUpdatedAuthorInput {
  create: [CategoryCreateWithoutUpdatedAuthorInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateOneWithoutPostersInput {
  create: CategoryCreateWithoutPostersInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutCreatedAuthorInput {
  id: ID
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishCreateOneWithoutCategoriesInput
  posters: PosterCreateManyWithoutCategoryInput
  updatedAuthor: UserCreateOneWithoutUpdatedCategoriesInput
}

input CategoryCreateWithoutParishInput {
  id: ID
  name: String
  published: Boolean
  title: String
  content: String
  posters: PosterCreateManyWithoutCategoryInput
  createdAuthor: UserCreateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserCreateOneWithoutUpdatedCategoriesInput
}

input CategoryCreateWithoutPostersInput {
  id: ID
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishCreateOneWithoutCategoriesInput
  createdAuthor: UserCreateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserCreateOneWithoutUpdatedCategoriesInput
}

input CategoryCreateWithoutUpdatedAuthorInput {
  id: ID
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishCreateOneWithoutCategoriesInput
  posters: PosterCreateManyWithoutCategoryInput
  createdAuthor: UserCreateOneWithoutCreatedCategoriesInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  published: Boolean!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishUpdateOneWithoutCategoriesInput
  posters: PosterUpdateManyWithoutCategoryInput
  createdAuthor: UserUpdateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserUpdateOneWithoutUpdatedCategoriesInput
}

input CategoryUpdateManyDataInput {
  name: String
  published: Boolean
  title: String
  content: String
}

input CategoryUpdateManyMutationInput {
  name: String
  published: Boolean
  title: String
  content: String
}

input CategoryUpdateManyWithoutCreatedAuthorInput {
  create: [CategoryCreateWithoutCreatedAuthorInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutCreatedAuthorInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutCreatedAuthorInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithoutParishInput {
  create: [CategoryCreateWithoutParishInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutParishInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutParishInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithoutUpdatedAuthorInput {
  create: [CategoryCreateWithoutUpdatedAuthorInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutUpdatedAuthorInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutUpdatedAuthorInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateOneWithoutPostersInput {
  create: CategoryCreateWithoutPostersInput
  update: CategoryUpdateWithoutPostersDataInput
  upsert: CategoryUpsertWithoutPostersInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutCreatedAuthorDataInput {
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishUpdateOneWithoutCategoriesInput
  posters: PosterUpdateManyWithoutCategoryInput
  updatedAuthor: UserUpdateOneWithoutUpdatedCategoriesInput
}

input CategoryUpdateWithoutParishDataInput {
  name: String
  published: Boolean
  title: String
  content: String
  posters: PosterUpdateManyWithoutCategoryInput
  createdAuthor: UserUpdateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserUpdateOneWithoutUpdatedCategoriesInput
}

input CategoryUpdateWithoutPostersDataInput {
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishUpdateOneWithoutCategoriesInput
  createdAuthor: UserUpdateOneWithoutCreatedCategoriesInput
  updatedAuthor: UserUpdateOneWithoutUpdatedCategoriesInput
}

input CategoryUpdateWithoutUpdatedAuthorDataInput {
  name: String
  published: Boolean
  title: String
  content: String
  parish: ParishUpdateOneWithoutCategoriesInput
  posters: PosterUpdateManyWithoutCategoryInput
  createdAuthor: UserUpdateOneWithoutCreatedCategoriesInput
}

input CategoryUpdateWithWhereUniqueWithoutCreatedAuthorInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutCreatedAuthorDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutParishInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutParishDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutUpdatedAuthorInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutUpdatedAuthorDataInput!
}

input CategoryUpsertWithoutPostersInput {
  update: CategoryUpdateWithoutPostersDataInput!
  create: CategoryCreateWithoutPostersInput!
}

input CategoryUpsertWithWhereUniqueWithoutCreatedAuthorInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutCreatedAuthorDataInput!
  create: CategoryCreateWithoutCreatedAuthorInput!
}

input CategoryUpsertWithWhereUniqueWithoutParishInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutParishDataInput!
  create: CategoryCreateWithoutParishInput!
}

input CategoryUpsertWithWhereUniqueWithoutUpdatedAuthorInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutUpdatedAuthorDataInput!
  create: CategoryCreateWithoutUpdatedAuthorInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  parish: ParishWhereInput
  posters_every: PosterWhereInput
  posters_some: PosterWhereInput
  posters_none: PosterWhereInput
  createdAuthor: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAuthor: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

type Deanery {
  id: ID!
  name: String!
  shortName: String
  parishes(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parish!]
  diocese: Diocese
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DeaneryConnection {
  pageInfo: PageInfo!
  edges: [DeaneryEdge]!
  aggregate: AggregateDeanery!
}

input DeaneryCreateInput {
  id: ID
  name: String
  shortName: String
  parishes: ParishCreateManyWithoutDeaneryInput
  diocese: DioceseCreateOneWithoutDeaneriesInput
  published: Boolean
}

input DeaneryCreateManyWithoutDioceseInput {
  create: [DeaneryCreateWithoutDioceseInput!]
  connect: [DeaneryWhereUniqueInput!]
}

input DeaneryCreateOneWithoutParishesInput {
  create: DeaneryCreateWithoutParishesInput
  connect: DeaneryWhereUniqueInput
}

input DeaneryCreateWithoutDioceseInput {
  id: ID
  name: String
  shortName: String
  parishes: ParishCreateManyWithoutDeaneryInput
  published: Boolean
}

input DeaneryCreateWithoutParishesInput {
  id: ID
  name: String
  shortName: String
  diocese: DioceseCreateOneWithoutDeaneriesInput
  published: Boolean
}

type DeaneryEdge {
  node: Deanery!
  cursor: String!
}

enum DeaneryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DeaneryPreviousValues {
  id: ID!
  name: String!
  shortName: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DeaneryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DeaneryScalarWhereInput!]
  OR: [DeaneryScalarWhereInput!]
  NOT: [DeaneryScalarWhereInput!]
}

type DeanerySubscriptionPayload {
  mutation: MutationType!
  node: Deanery
  updatedFields: [String!]
  previousValues: DeaneryPreviousValues
}

input DeanerySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeaneryWhereInput
  AND: [DeanerySubscriptionWhereInput!]
  OR: [DeanerySubscriptionWhereInput!]
  NOT: [DeanerySubscriptionWhereInput!]
}

input DeaneryUpdateInput {
  name: String
  shortName: String
  parishes: ParishUpdateManyWithoutDeaneryInput
  diocese: DioceseUpdateOneWithoutDeaneriesInput
  published: Boolean
}

input DeaneryUpdateManyDataInput {
  name: String
  shortName: String
  published: Boolean
}

input DeaneryUpdateManyMutationInput {
  name: String
  shortName: String
  published: Boolean
}

input DeaneryUpdateManyWithoutDioceseInput {
  create: [DeaneryCreateWithoutDioceseInput!]
  delete: [DeaneryWhereUniqueInput!]
  connect: [DeaneryWhereUniqueInput!]
  set: [DeaneryWhereUniqueInput!]
  disconnect: [DeaneryWhereUniqueInput!]
  update: [DeaneryUpdateWithWhereUniqueWithoutDioceseInput!]
  upsert: [DeaneryUpsertWithWhereUniqueWithoutDioceseInput!]
  deleteMany: [DeaneryScalarWhereInput!]
  updateMany: [DeaneryUpdateManyWithWhereNestedInput!]
}

input DeaneryUpdateManyWithWhereNestedInput {
  where: DeaneryScalarWhereInput!
  data: DeaneryUpdateManyDataInput!
}

input DeaneryUpdateOneWithoutParishesInput {
  create: DeaneryCreateWithoutParishesInput
  update: DeaneryUpdateWithoutParishesDataInput
  upsert: DeaneryUpsertWithoutParishesInput
  delete: Boolean
  disconnect: Boolean
  connect: DeaneryWhereUniqueInput
}

input DeaneryUpdateWithoutDioceseDataInput {
  name: String
  shortName: String
  parishes: ParishUpdateManyWithoutDeaneryInput
  published: Boolean
}

input DeaneryUpdateWithoutParishesDataInput {
  name: String
  shortName: String
  diocese: DioceseUpdateOneWithoutDeaneriesInput
  published: Boolean
}

input DeaneryUpdateWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput!
  data: DeaneryUpdateWithoutDioceseDataInput!
}

input DeaneryUpsertWithoutParishesInput {
  update: DeaneryUpdateWithoutParishesDataInput!
  create: DeaneryCreateWithoutParishesInput!
}

input DeaneryUpsertWithWhereUniqueWithoutDioceseInput {
  where: DeaneryWhereUniqueInput!
  update: DeaneryUpdateWithoutDioceseDataInput!
  create: DeaneryCreateWithoutDioceseInput!
}

input DeaneryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  parishes_every: ParishWhereInput
  parishes_some: ParishWhereInput
  parishes_none: ParishWhereInput
  diocese: DioceseWhereInput
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DeaneryWhereInput!]
  OR: [DeaneryWhereInput!]
  NOT: [DeaneryWhereInput!]
}

input DeaneryWhereUniqueInput {
  id: ID
}

type Diocese {
  id: ID!
  name: String!
  shortName: String
  deaneries(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deanery!]
  parishes(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parish!]
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DioceseConnection {
  pageInfo: PageInfo!
  edges: [DioceseEdge]!
  aggregate: AggregateDiocese!
}

input DioceseCreateInput {
  id: ID
  name: String
  shortName: String
  deaneries: DeaneryCreateManyWithoutDioceseInput
  parishes: ParishCreateManyWithoutDioceseInput
  published: Boolean
}

input DioceseCreateOneWithoutDeaneriesInput {
  create: DioceseCreateWithoutDeaneriesInput
  connect: DioceseWhereUniqueInput
}

input DioceseCreateOneWithoutParishesInput {
  create: DioceseCreateWithoutParishesInput
  connect: DioceseWhereUniqueInput
}

input DioceseCreateWithoutDeaneriesInput {
  id: ID
  name: String
  shortName: String
  parishes: ParishCreateManyWithoutDioceseInput
  published: Boolean
}

input DioceseCreateWithoutParishesInput {
  id: ID
  name: String
  shortName: String
  deaneries: DeaneryCreateManyWithoutDioceseInput
  published: Boolean
}

type DioceseEdge {
  node: Diocese!
  cursor: String!
}

enum DioceseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiocesePreviousValues {
  id: ID!
  name: String!
  shortName: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DioceseSubscriptionPayload {
  mutation: MutationType!
  node: Diocese
  updatedFields: [String!]
  previousValues: DiocesePreviousValues
}

input DioceseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DioceseWhereInput
  AND: [DioceseSubscriptionWhereInput!]
  OR: [DioceseSubscriptionWhereInput!]
  NOT: [DioceseSubscriptionWhereInput!]
}

input DioceseUpdateInput {
  name: String
  shortName: String
  deaneries: DeaneryUpdateManyWithoutDioceseInput
  parishes: ParishUpdateManyWithoutDioceseInput
  published: Boolean
}

input DioceseUpdateManyMutationInput {
  name: String
  shortName: String
  published: Boolean
}

input DioceseUpdateOneWithoutDeaneriesInput {
  create: DioceseCreateWithoutDeaneriesInput
  update: DioceseUpdateWithoutDeaneriesDataInput
  upsert: DioceseUpsertWithoutDeaneriesInput
  delete: Boolean
  disconnect: Boolean
  connect: DioceseWhereUniqueInput
}

input DioceseUpdateOneWithoutParishesInput {
  create: DioceseCreateWithoutParishesInput
  update: DioceseUpdateWithoutParishesDataInput
  upsert: DioceseUpsertWithoutParishesInput
  delete: Boolean
  disconnect: Boolean
  connect: DioceseWhereUniqueInput
}

input DioceseUpdateWithoutDeaneriesDataInput {
  name: String
  shortName: String
  parishes: ParishUpdateManyWithoutDioceseInput
  published: Boolean
}

input DioceseUpdateWithoutParishesDataInput {
  name: String
  shortName: String
  deaneries: DeaneryUpdateManyWithoutDioceseInput
  published: Boolean
}

input DioceseUpsertWithoutDeaneriesInput {
  update: DioceseUpdateWithoutDeaneriesDataInput!
  create: DioceseCreateWithoutDeaneriesInput!
}

input DioceseUpsertWithoutParishesInput {
  update: DioceseUpdateWithoutParishesDataInput!
  create: DioceseCreateWithoutParishesInput!
}

input DioceseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  deaneries_every: DeaneryWhereInput
  deaneries_some: DeaneryWhereInput
  deaneries_none: DeaneryWhereInput
  parishes_every: ParishWhereInput
  parishes_some: ParishWhereInput
  parishes_none: ParishWhereInput
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DioceseWhereInput!]
  OR: [DioceseWhereInput!]
  NOT: [DioceseWhereInput!]
}

input DioceseWhereUniqueInput {
  id: ID
}

type ImageType {
  id: ID!
  name: String!
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster!]
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageTypeConnection {
  pageInfo: PageInfo!
  edges: [ImageTypeEdge]!
  aggregate: AggregateImageType!
}

input ImageTypeCreateInput {
  id: ID
  name: String
  posters: PosterCreateManyWithoutImageTypeInput
  published: Boolean
}

input ImageTypeCreateOneWithoutPostersInput {
  create: ImageTypeCreateWithoutPostersInput
  connect: ImageTypeWhereUniqueInput
}

input ImageTypeCreateWithoutPostersInput {
  id: ID
  name: String
  published: Boolean
}

type ImageTypeEdge {
  node: ImageType!
  cursor: String!
}

enum ImageTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImageTypePreviousValues {
  id: ID!
  name: String!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImageTypeSubscriptionPayload {
  mutation: MutationType!
  node: ImageType
  updatedFields: [String!]
  previousValues: ImageTypePreviousValues
}

input ImageTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageTypeWhereInput
  AND: [ImageTypeSubscriptionWhereInput!]
  OR: [ImageTypeSubscriptionWhereInput!]
  NOT: [ImageTypeSubscriptionWhereInput!]
}

input ImageTypeUpdateInput {
  name: String
  posters: PosterUpdateManyWithoutImageTypeInput
  published: Boolean
}

input ImageTypeUpdateManyMutationInput {
  name: String
  published: Boolean
}

input ImageTypeUpdateOneWithoutPostersInput {
  create: ImageTypeCreateWithoutPostersInput
  update: ImageTypeUpdateWithoutPostersDataInput
  upsert: ImageTypeUpsertWithoutPostersInput
  delete: Boolean
  disconnect: Boolean
  connect: ImageTypeWhereUniqueInput
}

input ImageTypeUpdateWithoutPostersDataInput {
  name: String
  published: Boolean
}

input ImageTypeUpsertWithoutPostersInput {
  update: ImageTypeUpdateWithoutPostersDataInput!
  create: ImageTypeCreateWithoutPostersInput!
}

input ImageTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posters_every: PosterWhereInput
  posters_some: PosterWhereInput
  posters_none: PosterWhereInput
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ImageTypeWhereInput!]
  OR: [ImageTypeWhereInput!]
  NOT: [ImageTypeWhereInput!]
}

input ImageTypeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createDeanery(data: DeaneryCreateInput!): Deanery!
  updateDeanery(data: DeaneryUpdateInput!, where: DeaneryWhereUniqueInput!): Deanery
  updateManyDeaneries(data: DeaneryUpdateManyMutationInput!, where: DeaneryWhereInput): BatchPayload!
  upsertDeanery(where: DeaneryWhereUniqueInput!, create: DeaneryCreateInput!, update: DeaneryUpdateInput!): Deanery!
  deleteDeanery(where: DeaneryWhereUniqueInput!): Deanery
  deleteManyDeaneries(where: DeaneryWhereInput): BatchPayload!
  createDiocese(data: DioceseCreateInput!): Diocese!
  updateDiocese(data: DioceseUpdateInput!, where: DioceseWhereUniqueInput!): Diocese
  updateManyDioceses(data: DioceseUpdateManyMutationInput!, where: DioceseWhereInput): BatchPayload!
  upsertDiocese(where: DioceseWhereUniqueInput!, create: DioceseCreateInput!, update: DioceseUpdateInput!): Diocese!
  deleteDiocese(where: DioceseWhereUniqueInput!): Diocese
  deleteManyDioceses(where: DioceseWhereInput): BatchPayload!
  createImageType(data: ImageTypeCreateInput!): ImageType!
  updateImageType(data: ImageTypeUpdateInput!, where: ImageTypeWhereUniqueInput!): ImageType
  updateManyImageTypes(data: ImageTypeUpdateManyMutationInput!, where: ImageTypeWhereInput): BatchPayload!
  upsertImageType(where: ImageTypeWhereUniqueInput!, create: ImageTypeCreateInput!, update: ImageTypeUpdateInput!): ImageType!
  deleteImageType(where: ImageTypeWhereUniqueInput!): ImageType
  deleteManyImageTypes(where: ImageTypeWhereInput): BatchPayload!
  createParish(data: ParishCreateInput!): Parish!
  updateParish(data: ParishUpdateInput!, where: ParishWhereUniqueInput!): Parish
  updateManyParishes(data: ParishUpdateManyMutationInput!, where: ParishWhereInput): BatchPayload!
  upsertParish(where: ParishWhereUniqueInput!, create: ParishCreateInput!, update: ParishUpdateInput!): Parish!
  deleteParish(where: ParishWhereUniqueInput!): Parish
  deleteManyParishes(where: ParishWhereInput): BatchPayload!
  createPoster(data: PosterCreateInput!): Poster!
  updatePoster(data: PosterUpdateInput!, where: PosterWhereUniqueInput!): Poster
  updateManyPosters(data: PosterUpdateManyMutationInput!, where: PosterWhereInput): BatchPayload!
  upsertPoster(where: PosterWhereUniqueInput!, create: PosterCreateInput!, update: PosterUpdateInput!): Poster!
  deletePoster(where: PosterWhereUniqueInput!): Poster
  deleteManyPosters(where: PosterWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parish {
  id: ID!
  name: String!
  shortName: String
  deanery: Deanery
  diocese: Diocese
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ParishConnection {
  pageInfo: PageInfo!
  edges: [ParishEdge]!
  aggregate: AggregateParish!
}

input ParishCreateInput {
  id: ID
  name: String
  shortName: String
  deanery: DeaneryCreateOneWithoutParishesInput
  diocese: DioceseCreateOneWithoutParishesInput
  categories: CategoryCreateManyWithoutParishInput
  published: Boolean
}

input ParishCreateManyWithoutDeaneryInput {
  create: [ParishCreateWithoutDeaneryInput!]
  connect: [ParishWhereUniqueInput!]
}

input ParishCreateManyWithoutDioceseInput {
  create: [ParishCreateWithoutDioceseInput!]
  connect: [ParishWhereUniqueInput!]
}

input ParishCreateOneWithoutCategoriesInput {
  create: ParishCreateWithoutCategoriesInput
  connect: ParishWhereUniqueInput
}

input ParishCreateWithoutCategoriesInput {
  id: ID
  name: String
  shortName: String
  deanery: DeaneryCreateOneWithoutParishesInput
  diocese: DioceseCreateOneWithoutParishesInput
  published: Boolean
}

input ParishCreateWithoutDeaneryInput {
  id: ID
  name: String
  shortName: String
  diocese: DioceseCreateOneWithoutParishesInput
  categories: CategoryCreateManyWithoutParishInput
  published: Boolean
}

input ParishCreateWithoutDioceseInput {
  id: ID
  name: String
  shortName: String
  deanery: DeaneryCreateOneWithoutParishesInput
  categories: CategoryCreateManyWithoutParishInput
  published: Boolean
}

type ParishEdge {
  node: Parish!
  cursor: String!
}

enum ParishOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ParishPreviousValues {
  id: ID!
  name: String!
  shortName: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ParishScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ParishScalarWhereInput!]
  OR: [ParishScalarWhereInput!]
  NOT: [ParishScalarWhereInput!]
}

type ParishSubscriptionPayload {
  mutation: MutationType!
  node: Parish
  updatedFields: [String!]
  previousValues: ParishPreviousValues
}

input ParishSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParishWhereInput
  AND: [ParishSubscriptionWhereInput!]
  OR: [ParishSubscriptionWhereInput!]
  NOT: [ParishSubscriptionWhereInput!]
}

input ParishUpdateInput {
  name: String
  shortName: String
  deanery: DeaneryUpdateOneWithoutParishesInput
  diocese: DioceseUpdateOneWithoutParishesInput
  categories: CategoryUpdateManyWithoutParishInput
  published: Boolean
}

input ParishUpdateManyDataInput {
  name: String
  shortName: String
  published: Boolean
}

input ParishUpdateManyMutationInput {
  name: String
  shortName: String
  published: Boolean
}

input ParishUpdateManyWithoutDeaneryInput {
  create: [ParishCreateWithoutDeaneryInput!]
  delete: [ParishWhereUniqueInput!]
  connect: [ParishWhereUniqueInput!]
  set: [ParishWhereUniqueInput!]
  disconnect: [ParishWhereUniqueInput!]
  update: [ParishUpdateWithWhereUniqueWithoutDeaneryInput!]
  upsert: [ParishUpsertWithWhereUniqueWithoutDeaneryInput!]
  deleteMany: [ParishScalarWhereInput!]
  updateMany: [ParishUpdateManyWithWhereNestedInput!]
}

input ParishUpdateManyWithoutDioceseInput {
  create: [ParishCreateWithoutDioceseInput!]
  delete: [ParishWhereUniqueInput!]
  connect: [ParishWhereUniqueInput!]
  set: [ParishWhereUniqueInput!]
  disconnect: [ParishWhereUniqueInput!]
  update: [ParishUpdateWithWhereUniqueWithoutDioceseInput!]
  upsert: [ParishUpsertWithWhereUniqueWithoutDioceseInput!]
  deleteMany: [ParishScalarWhereInput!]
  updateMany: [ParishUpdateManyWithWhereNestedInput!]
}

input ParishUpdateManyWithWhereNestedInput {
  where: ParishScalarWhereInput!
  data: ParishUpdateManyDataInput!
}

input ParishUpdateOneWithoutCategoriesInput {
  create: ParishCreateWithoutCategoriesInput
  update: ParishUpdateWithoutCategoriesDataInput
  upsert: ParishUpsertWithoutCategoriesInput
  delete: Boolean
  disconnect: Boolean
  connect: ParishWhereUniqueInput
}

input ParishUpdateWithoutCategoriesDataInput {
  name: String
  shortName: String
  deanery: DeaneryUpdateOneWithoutParishesInput
  diocese: DioceseUpdateOneWithoutParishesInput
  published: Boolean
}

input ParishUpdateWithoutDeaneryDataInput {
  name: String
  shortName: String
  diocese: DioceseUpdateOneWithoutParishesInput
  categories: CategoryUpdateManyWithoutParishInput
  published: Boolean
}

input ParishUpdateWithoutDioceseDataInput {
  name: String
  shortName: String
  deanery: DeaneryUpdateOneWithoutParishesInput
  categories: CategoryUpdateManyWithoutParishInput
  published: Boolean
}

input ParishUpdateWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput!
  data: ParishUpdateWithoutDeaneryDataInput!
}

input ParishUpdateWithWhereUniqueWithoutDioceseInput {
  where: ParishWhereUniqueInput!
  data: ParishUpdateWithoutDioceseDataInput!
}

input ParishUpsertWithoutCategoriesInput {
  update: ParishUpdateWithoutCategoriesDataInput!
  create: ParishCreateWithoutCategoriesInput!
}

input ParishUpsertWithWhereUniqueWithoutDeaneryInput {
  where: ParishWhereUniqueInput!
  update: ParishUpdateWithoutDeaneryDataInput!
  create: ParishCreateWithoutDeaneryInput!
}

input ParishUpsertWithWhereUniqueWithoutDioceseInput {
  where: ParishWhereUniqueInput!
  update: ParishUpdateWithoutDioceseDataInput!
  create: ParishCreateWithoutDioceseInput!
}

input ParishWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  shortName: String
  shortName_not: String
  shortName_in: [String!]
  shortName_not_in: [String!]
  shortName_lt: String
  shortName_lte: String
  shortName_gt: String
  shortName_gte: String
  shortName_contains: String
  shortName_not_contains: String
  shortName_starts_with: String
  shortName_not_starts_with: String
  shortName_ends_with: String
  shortName_not_ends_with: String
  deanery: DeaneryWhereInput
  diocese: DioceseWhereInput
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  published: Boolean
  published_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ParishWhereInput!]
  OR: [ParishWhereInput!]
  NOT: [ParishWhereInput!]
}

input ParishWhereUniqueInput {
  id: ID
}

type Poster {
  id: ID!
  name: String!
  image: String
  thumbnail: String
  description: String
  published: Boolean!
  title: String
  content: String
  imageType: ImageType
  category: Category
  createdAuthor: User
  createdAt: DateTime!
  updatedAuthor: User
  updatedAt: DateTime!
}

type PosterConnection {
  pageInfo: PageInfo!
  edges: [PosterEdge]!
  aggregate: AggregatePoster!
}

input PosterCreateInput {
  id: ID
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeCreateOneWithoutPostersInput
  category: CategoryCreateOneWithoutPostersInput
  createdAuthor: UserCreateOneInput
  updatedAuthor: UserCreateOneWithoutUpdatedPostersInput
}

input PosterCreateManyInput {
  create: [PosterCreateInput!]
  connect: [PosterWhereUniqueInput!]
}

input PosterCreateManyWithoutCategoryInput {
  create: [PosterCreateWithoutCategoryInput!]
  connect: [PosterWhereUniqueInput!]
}

input PosterCreateManyWithoutImageTypeInput {
  create: [PosterCreateWithoutImageTypeInput!]
  connect: [PosterWhereUniqueInput!]
}

input PosterCreateManyWithoutUpdatedAuthorInput {
  create: [PosterCreateWithoutUpdatedAuthorInput!]
  connect: [PosterWhereUniqueInput!]
}

input PosterCreateWithoutCategoryInput {
  id: ID
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeCreateOneWithoutPostersInput
  createdAuthor: UserCreateOneInput
  updatedAuthor: UserCreateOneWithoutUpdatedPostersInput
}

input PosterCreateWithoutImageTypeInput {
  id: ID
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  category: CategoryCreateOneWithoutPostersInput
  createdAuthor: UserCreateOneInput
  updatedAuthor: UserCreateOneWithoutUpdatedPostersInput
}

input PosterCreateWithoutUpdatedAuthorInput {
  id: ID
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeCreateOneWithoutPostersInput
  category: CategoryCreateOneWithoutPostersInput
  createdAuthor: UserCreateOneInput
}

type PosterEdge {
  node: Poster!
  cursor: String!
}

enum PosterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  thumbnail_ASC
  thumbnail_DESC
  description_ASC
  description_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PosterPreviousValues {
  id: ID!
  name: String!
  image: String
  thumbnail: String
  description: String
  published: Boolean!
  title: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PosterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PosterScalarWhereInput!]
  OR: [PosterScalarWhereInput!]
  NOT: [PosterScalarWhereInput!]
}

type PosterSubscriptionPayload {
  mutation: MutationType!
  node: Poster
  updatedFields: [String!]
  previousValues: PosterPreviousValues
}

input PosterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PosterWhereInput
  AND: [PosterSubscriptionWhereInput!]
  OR: [PosterSubscriptionWhereInput!]
  NOT: [PosterSubscriptionWhereInput!]
}

input PosterUpdateDataInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeUpdateOneWithoutPostersInput
  category: CategoryUpdateOneWithoutPostersInput
  createdAuthor: UserUpdateOneInput
  updatedAuthor: UserUpdateOneWithoutUpdatedPostersInput
}

input PosterUpdateInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeUpdateOneWithoutPostersInput
  category: CategoryUpdateOneWithoutPostersInput
  createdAuthor: UserUpdateOneInput
  updatedAuthor: UserUpdateOneWithoutUpdatedPostersInput
}

input PosterUpdateManyDataInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
}

input PosterUpdateManyInput {
  create: [PosterCreateInput!]
  update: [PosterUpdateWithWhereUniqueNestedInput!]
  upsert: [PosterUpsertWithWhereUniqueNestedInput!]
  delete: [PosterWhereUniqueInput!]
  connect: [PosterWhereUniqueInput!]
  set: [PosterWhereUniqueInput!]
  disconnect: [PosterWhereUniqueInput!]
  deleteMany: [PosterScalarWhereInput!]
  updateMany: [PosterUpdateManyWithWhereNestedInput!]
}

input PosterUpdateManyMutationInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
}

input PosterUpdateManyWithoutCategoryInput {
  create: [PosterCreateWithoutCategoryInput!]
  delete: [PosterWhereUniqueInput!]
  connect: [PosterWhereUniqueInput!]
  set: [PosterWhereUniqueInput!]
  disconnect: [PosterWhereUniqueInput!]
  update: [PosterUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [PosterUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [PosterScalarWhereInput!]
  updateMany: [PosterUpdateManyWithWhereNestedInput!]
}

input PosterUpdateManyWithoutImageTypeInput {
  create: [PosterCreateWithoutImageTypeInput!]
  delete: [PosterWhereUniqueInput!]
  connect: [PosterWhereUniqueInput!]
  set: [PosterWhereUniqueInput!]
  disconnect: [PosterWhereUniqueInput!]
  update: [PosterUpdateWithWhereUniqueWithoutImageTypeInput!]
  upsert: [PosterUpsertWithWhereUniqueWithoutImageTypeInput!]
  deleteMany: [PosterScalarWhereInput!]
  updateMany: [PosterUpdateManyWithWhereNestedInput!]
}

input PosterUpdateManyWithoutUpdatedAuthorInput {
  create: [PosterCreateWithoutUpdatedAuthorInput!]
  delete: [PosterWhereUniqueInput!]
  connect: [PosterWhereUniqueInput!]
  set: [PosterWhereUniqueInput!]
  disconnect: [PosterWhereUniqueInput!]
  update: [PosterUpdateWithWhereUniqueWithoutUpdatedAuthorInput!]
  upsert: [PosterUpsertWithWhereUniqueWithoutUpdatedAuthorInput!]
  deleteMany: [PosterScalarWhereInput!]
  updateMany: [PosterUpdateManyWithWhereNestedInput!]
}

input PosterUpdateManyWithWhereNestedInput {
  where: PosterScalarWhereInput!
  data: PosterUpdateManyDataInput!
}

input PosterUpdateWithoutCategoryDataInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeUpdateOneWithoutPostersInput
  createdAuthor: UserUpdateOneInput
  updatedAuthor: UserUpdateOneWithoutUpdatedPostersInput
}

input PosterUpdateWithoutImageTypeDataInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  category: CategoryUpdateOneWithoutPostersInput
  createdAuthor: UserUpdateOneInput
  updatedAuthor: UserUpdateOneWithoutUpdatedPostersInput
}

input PosterUpdateWithoutUpdatedAuthorDataInput {
  name: String
  image: String
  thumbnail: String
  description: String
  published: Boolean
  title: String
  content: String
  imageType: ImageTypeUpdateOneWithoutPostersInput
  category: CategoryUpdateOneWithoutPostersInput
  createdAuthor: UserUpdateOneInput
}

input PosterUpdateWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput!
  data: PosterUpdateDataInput!
}

input PosterUpdateWithWhereUniqueWithoutCategoryInput {
  where: PosterWhereUniqueInput!
  data: PosterUpdateWithoutCategoryDataInput!
}

input PosterUpdateWithWhereUniqueWithoutImageTypeInput {
  where: PosterWhereUniqueInput!
  data: PosterUpdateWithoutImageTypeDataInput!
}

input PosterUpdateWithWhereUniqueWithoutUpdatedAuthorInput {
  where: PosterWhereUniqueInput!
  data: PosterUpdateWithoutUpdatedAuthorDataInput!
}

input PosterUpsertWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput!
  update: PosterUpdateDataInput!
  create: PosterCreateInput!
}

input PosterUpsertWithWhereUniqueWithoutCategoryInput {
  where: PosterWhereUniqueInput!
  update: PosterUpdateWithoutCategoryDataInput!
  create: PosterCreateWithoutCategoryInput!
}

input PosterUpsertWithWhereUniqueWithoutImageTypeInput {
  where: PosterWhereUniqueInput!
  update: PosterUpdateWithoutImageTypeDataInput!
  create: PosterCreateWithoutImageTypeInput!
}

input PosterUpsertWithWhereUniqueWithoutUpdatedAuthorInput {
  where: PosterWhereUniqueInput!
  update: PosterUpdateWithoutUpdatedAuthorDataInput!
  create: PosterCreateWithoutUpdatedAuthorInput!
}

input PosterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  thumbnail: String
  thumbnail_not: String
  thumbnail_in: [String!]
  thumbnail_not_in: [String!]
  thumbnail_lt: String
  thumbnail_lte: String
  thumbnail_gt: String
  thumbnail_gte: String
  thumbnail_contains: String
  thumbnail_not_contains: String
  thumbnail_starts_with: String
  thumbnail_not_starts_with: String
  thumbnail_ends_with: String
  thumbnail_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  imageType: ImageTypeWhereInput
  category: CategoryWhereInput
  createdAuthor: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAuthor: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PosterWhereInput!]
  OR: [PosterWhereInput!]
  NOT: [PosterWhereInput!]
}

input PosterWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  deanery(where: DeaneryWhereUniqueInput!): Deanery
  deaneries(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deanery]!
  deaneriesConnection(where: DeaneryWhereInput, orderBy: DeaneryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeaneryConnection!
  diocese(where: DioceseWhereUniqueInput!): Diocese
  dioceses(where: DioceseWhereInput, orderBy: DioceseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Diocese]!
  diocesesConnection(where: DioceseWhereInput, orderBy: DioceseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DioceseConnection!
  imageType(where: ImageTypeWhereUniqueInput!): ImageType
  imageTypes(where: ImageTypeWhereInput, orderBy: ImageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImageType]!
  imageTypesConnection(where: ImageTypeWhereInput, orderBy: ImageTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageTypeConnection!
  parish(where: ParishWhereUniqueInput!): Parish
  parishes(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parish]!
  parishesConnection(where: ParishWhereInput, orderBy: ParishOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParishConnection!
  poster(where: PosterWhereUniqueInput!): Poster
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster]!
  postersConnection(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PosterConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  deanery(where: DeanerySubscriptionWhereInput): DeanerySubscriptionPayload
  diocese(where: DioceseSubscriptionWhereInput): DioceseSubscriptionPayload
  imageType(where: ImageTypeSubscriptionWhereInput): ImageTypeSubscriptionPayload
  parish(where: ParishSubscriptionWhereInput): ParishSubscriptionPayload
  poster(where: PosterSubscriptionWhereInput): PosterSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String
  name: String
  published: Boolean!
  createdPosters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster!]
  createdCategories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  createdAt: DateTime!
  updatedPosters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster!]
  updatedCategories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterCreateManyInput
  createdCategories: CategoryCreateManyWithoutCreatedAuthorInput
  updatedPosters: PosterCreateManyWithoutUpdatedAuthorInput
  updatedCategories: CategoryCreateManyWithoutUpdatedAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedCategoriesInput {
  create: UserCreateWithoutCreatedCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUpdatedCategoriesInput {
  create: UserCreateWithoutUpdatedCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUpdatedPostersInput {
  create: UserCreateWithoutUpdatedPostersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedCategoriesInput {
  id: ID
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterCreateManyInput
  updatedPosters: PosterCreateManyWithoutUpdatedAuthorInput
  updatedCategories: CategoryCreateManyWithoutUpdatedAuthorInput
}

input UserCreateWithoutUpdatedCategoriesInput {
  id: ID
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterCreateManyInput
  createdCategories: CategoryCreateManyWithoutCreatedAuthorInput
  updatedPosters: PosterCreateManyWithoutUpdatedAuthorInput
}

input UserCreateWithoutUpdatedPostersInput {
  id: ID
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterCreateManyInput
  createdCategories: CategoryCreateManyWithoutCreatedAuthorInput
  updatedCategories: CategoryCreateManyWithoutUpdatedAuthorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String
  name: String
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterUpdateManyInput
  createdCategories: CategoryUpdateManyWithoutCreatedAuthorInput
  updatedPosters: PosterUpdateManyWithoutUpdatedAuthorInput
  updatedCategories: CategoryUpdateManyWithoutUpdatedAuthorInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterUpdateManyInput
  createdCategories: CategoryUpdateManyWithoutCreatedAuthorInput
  updatedPosters: PosterUpdateManyWithoutUpdatedAuthorInput
  updatedCategories: CategoryUpdateManyWithoutUpdatedAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  published: Boolean
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCreatedCategoriesInput {
  create: UserCreateWithoutCreatedCategoriesInput
  update: UserUpdateWithoutCreatedCategoriesDataInput
  upsert: UserUpsertWithoutCreatedCategoriesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUpdatedCategoriesInput {
  create: UserCreateWithoutUpdatedCategoriesInput
  update: UserUpdateWithoutUpdatedCategoriesDataInput
  upsert: UserUpsertWithoutUpdatedCategoriesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUpdatedPostersInput {
  create: UserCreateWithoutUpdatedPostersInput
  update: UserUpdateWithoutUpdatedPostersDataInput
  upsert: UserUpsertWithoutUpdatedPostersInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedCategoriesDataInput {
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterUpdateManyInput
  updatedPosters: PosterUpdateManyWithoutUpdatedAuthorInput
  updatedCategories: CategoryUpdateManyWithoutUpdatedAuthorInput
}

input UserUpdateWithoutUpdatedCategoriesDataInput {
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterUpdateManyInput
  createdCategories: CategoryUpdateManyWithoutCreatedAuthorInput
  updatedPosters: PosterUpdateManyWithoutUpdatedAuthorInput
}

input UserUpdateWithoutUpdatedPostersDataInput {
  email: String
  password: String
  name: String
  published: Boolean
  createdPosters: PosterUpdateManyInput
  createdCategories: CategoryUpdateManyWithoutCreatedAuthorInput
  updatedCategories: CategoryUpdateManyWithoutUpdatedAuthorInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCreatedCategoriesInput {
  update: UserUpdateWithoutCreatedCategoriesDataInput!
  create: UserCreateWithoutCreatedCategoriesInput!
}

input UserUpsertWithoutUpdatedCategoriesInput {
  update: UserUpdateWithoutUpdatedCategoriesDataInput!
  create: UserCreateWithoutUpdatedCategoriesInput!
}

input UserUpsertWithoutUpdatedPostersInput {
  update: UserUpdateWithoutUpdatedPostersDataInput!
  create: UserCreateWithoutUpdatedPostersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  published: Boolean
  published_not: Boolean
  createdPosters_every: PosterWhereInput
  createdPosters_some: PosterWhereInput
  createdPosters_none: PosterWhereInput
  createdCategories_every: CategoryWhereInput
  createdCategories_some: CategoryWhereInput
  createdCategories_none: CategoryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedPosters_every: PosterWhereInput
  updatedPosters_some: PosterWhereInput
  updatedPosters_none: PosterWhereInput
  updatedCategories_every: CategoryWhereInput
  updatedCategories_some: CategoryWhereInput
  updatedCategories_none: CategoryWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    